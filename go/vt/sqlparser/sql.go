// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	sqlVal               *SQLVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	characteristic       Characteristic
	characteristics      []Characteristic
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               Expr
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
	execVarDef           ExecVarDef
	execVarDefOpt        *ExecVarDef
	execVarDefs          []ExecVarDef
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const DO = 57376
const DISTINCTROW = 57377
const VALUES = 57378
const LAST_INSERT_ID = 57379
const NEXT = 57380
const VALUE = 57381
const SHARE = 57382
const MODE = 57383
const SQL_NO_CACHE = 57384
const SQL_CACHE = 57385
const SQL_CALC_FOUND_ROWS = 57386
const JOIN = 57387
const STRAIGHT_JOIN = 57388
const LEFT = 57389
const RIGHT = 57390
const INNER = 57391
const OUTER = 57392
const CROSS = 57393
const NATURAL = 57394
const USE = 57395
const FORCE = 57396
const ON = 57397
const USING = 57398
const ID = 57399
const AT_ID = 57400
const AT_AT_ID = 57401
const HEX = 57402
const STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const OFF = 57415
const OR = 57416
const XOR = 57417
const AND = 57418
const NOT = 57419
const BETWEEN = 57420
const CASE = 57421
const WHEN = 57422
const THEN = 57423
const ELSE = 57424
const END = 57425
const LE = 57426
const GE = 57427
const NE = 57428
const NULL_SAFE_EQUAL = 57429
const IS = 57430
const LIKE = 57431
const REGEXP = 57432
const IN = 57433
const SHIFT_LEFT = 57434
const SHIFT_RIGHT = 57435
const DIV = 57436
const MOD = 57437
const UNARY = 57438
const COLLATE = 57439
const BINARY = 57440
const UNDERSCORE_BINARY = 57441
const UNDERSCORE_UTF8MB4 = 57442
const UNDERSCORE_UTF8 = 57443
const UNDERSCORE_LATIN1 = 57444
const INTERVAL = 57445
const JSON_EXTRACT_OP = 57446
const JSON_UNQUOTE_EXTRACT_OP = 57447
const CREATE = 57448
const ALTER = 57449
const DROP = 57450
const RENAME = 57451
const ANALYZE = 57452
const ADD = 57453
const FLUSH = 57454
const SCHEMA = 57455
const TABLE = 57456
const INDEX = 57457
const VIEW = 57458
const TO = 57459
const IGNORE = 57460
const IF = 57461
const UNIQUE = 57462
const PRIMARY = 57463
const COLUMN = 57464
const SPATIAL = 57465
const FULLTEXT = 57466
const KEY_BLOCK_SIZE = 57467
const CHECK = 57468
const INDEXES = 57469
const ACTION = 57470
const CASCADE = 57471
const CONSTRAINT = 57472
const FOREIGN = 57473
const NO = 57474
const REFERENCES = 57475
const RESTRICT = 57476
const SHOW = 57477
const DESCRIBE = 57478
const EXPLAIN = 57479
const DATE = 57480
const ESCAPE = 57481
const REPAIR = 57482
const OPTIMIZE = 57483
const TRUNCATE = 57484
const MAXVALUE = 57485
const PARTITION = 57486
const REORGANIZE = 57487
const LESS = 57488
const THAN = 57489
const PROCEDURE = 57490
const TRIGGER = 57491
const VINDEX = 57492
const VINDEXES = 57493
const STATUS = 57494
const VARIABLES = 57495
const WARNINGS = 57496
const SEQUENCE = 57497
const BEGIN = 57498
const START = 57499
const TRANSACTION = 57500
const COMMIT = 57501
const ROLLBACK = 57502
const SAVEPOINT = 57503
const RELEASE = 57504
const WORK = 57505
const BIT = 57506
const TINYINT = 57507
const SMALLINT = 57508
const MEDIUMINT = 57509
const INT = 57510
const INTEGER = 57511
const BIGINT = 57512
const INTNUM = 57513
const REAL = 57514
const DOUBLE = 57515
const FLOAT_TYPE = 57516
const DECIMAL = 57517
const NUMERIC = 57518
const TIME = 57519
const TIMESTAMP = 57520
const DATETIME = 57521
const YEAR = 57522
const CHAR = 57523
const VARCHAR = 57524
const BOOL = 57525
const CHARACTER = 57526
const VARBINARY = 57527
const NCHAR = 57528
const TEXT = 57529
const TINYTEXT = 57530
const MEDIUMTEXT = 57531
const LONGTEXT = 57532
const BLOB = 57533
const TINYBLOB = 57534
const MEDIUMBLOB = 57535
const LONGBLOB = 57536
const JSON = 57537
const ENUM = 57538
const GEOMETRY = 57539
const POINT = 57540
const LINESTRING = 57541
const POLYGON = 57542
const GEOMETRYCOLLECTION = 57543
const MULTIPOINT = 57544
const MULTILINESTRING = 57545
const MULTIPOLYGON = 57546
const NULLX = 57547
const AUTO_INCREMENT = 57548
const APPROXNUM = 57549
const SIGNED = 57550
const UNSIGNED = 57551
const ZEROFILL = 57552
const COLLATION = 57553
const DATABASES = 57554
const TABLES = 57555
const VITESS_METADATA = 57556
const VSCHEMA = 57557
const FULL = 57558
const PROCESSLIST = 57559
const COLUMNS = 57560
const FIELDS = 57561
const ENGINES = 57562
const PLUGINS = 57563
const EXTENDED = 57564
const NAMES = 57565
const CHARSET = 57566
const GLOBAL = 57567
const SESSION = 57568
const ISOLATION = 57569
const LEVEL = 57570
const READ = 57571
const WRITE = 57572
const ONLY = 57573
const REPEATABLE = 57574
const COMMITTED = 57575
const UNCOMMITTED = 57576
const SERIALIZABLE = 57577
const CURRENT_TIMESTAMP = 57578
const DATABASE = 57579
const CURRENT_DATE = 57580
const CURRENT_TIME = 57581
const LOCALTIME = 57582
const LOCALTIMESTAMP = 57583
const UTC_DATE = 57584
const UTC_TIME = 57585
const UTC_TIMESTAMP = 57586
const REPLACE = 57587
const CONVERT = 57588
const CAST = 57589
const SUBSTR = 57590
const SUBSTRING = 57591
const GROUP_CONCAT = 57592
const SEPARATOR = 57593
const TIMESTAMPADD = 57594
const TIMESTAMPDIFF = 57595
const MATCH = 57596
const AGAINST = 57597
const BOOLEAN = 57598
const LANGUAGE = 57599
const WITH = 57600
const QUERY = 57601
const EXPANSION = 57602
const UNUSED = 57603
const ARRAY = 57604
const CUME_DIST = 57605
const DESCRIPTION = 57606
const DENSE_RANK = 57607
const EMPTY = 57608
const EXCEPT = 57609
const FIRST_VALUE = 57610
const GROUPING = 57611
const GROUPS = 57612
const JSON_TABLE = 57613
const LAG = 57614
const LAST_VALUE = 57615
const LATERAL = 57616
const LEAD = 57617
const MEMBER = 57618
const NTH_VALUE = 57619
const NTILE = 57620
const OF = 57621
const OVER = 57622
const PERCENT_RANK = 57623
const RANK = 57624
const RECURSIVE = 57625
const ROW_NUMBER = 57626
const SYSTEM = 57627
const WINDOW = 57628
const ACTIVE = 57629
const ADMIN = 57630
const BUCKETS = 57631
const CLONE = 57632
const COMPONENT = 57633
const DEFINITION = 57634
const ENFORCED = 57635
const EXCLUDE = 57636
const FOLLOWING = 57637
const GEOMCOLLECTION = 57638
const GET_MASTER_PUBLIC_KEY = 57639
const HISTOGRAM = 57640
const HISTORY = 57641
const INACTIVE = 57642
const INVISIBLE = 57643
const LOCKED = 57644
const MASTER_COMPRESSION_ALGORITHMS = 57645
const MASTER_PUBLIC_KEY_PATH = 57646
const MASTER_TLS_CIPHERSUITES = 57647
const MASTER_ZSTD_COMPRESSION_LEVEL = 57648
const NESTED = 57649
const NETWORK_NAMESPACE = 57650
const NOWAIT = 57651
const NULLS = 57652
const OJ = 57653
const OLD = 57654
const OPTIONAL = 57655
const ORDINALITY = 57656
const ORGANIZATION = 57657
const OTHERS = 57658
const PATH = 57659
const PERSIST = 57660
const PERSIST_ONLY = 57661
const PRECEDING = 57662
const PRIVILEGE_CHECKS_USER = 57663
const PROCESS = 57664
const RANDOM = 57665
const REFERENCE = 57666
const REQUIRE_ROW_FORMAT = 57667
const RESOURCE = 57668
const RESPECT = 57669
const RESTART = 57670
const RETAIN = 57671
const REUSE = 57672
const ROLE = 57673
const SECONDARY = 57674
const SECONDARY_ENGINE = 57675
const SECONDARY_LOAD = 57676
const SECONDARY_UNLOAD = 57677
const SKIP = 57678
const SRID = 57679
const THREAD_PRIORITY = 57680
const TIES = 57681
const UNBOUNDED = 57682
const VCPU = 57683
const VISIBLE = 57684
const FORMAT = 57685
const TREE = 57686
const VITESS = 57687
const TRADITIONAL = 57688
const AUTH = 57689
const INTERACTIVE = 57690
const LOGIN = 57691
const REVOKE = 57692
const SA = 57693
const SERVICEACCOUNT = 57694
const SLEEP = 57695
const EXEC = 57696
const INFRAQL = 57697

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"DISTINCTROW",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_LATIN1",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"RELEASE",
	"WORK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"EXTENDED",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"FORMAT",
	"TREE",
	"VITESS",
	"TRADITIONAL",
	"AUTH",
	"INTERACTIVE",
	"LOGIN",
	"REVOKE",
	"SA",
	"SERVICEACCOUNT",
	"SLEEP",
	"EXEC",
	"INFRAQL",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 0,
	364, 86,
	-2, 31,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 45,
	169, 337,
	170, 337,
	230, 325,
	234, 325,
	235, 325,
	236, 325,
	-2, 323,
	-1, 50,
	134, 347,
	-2, 345,
	-1, 53,
	6, 353,
	8, 353,
	9, 353,
	10, 353,
	57, 353,
	262, 353,
	-2, 325,
	-1, 77,
	38, 383,
	-2, 391,
	-1, 402,
	120, 718,
	-2, 714,
	-1, 403,
	120, 719,
	-2, 715,
	-1, 420,
	38, 384,
	-2, 396,
	-1, 421,
	38, 385,
	-2, 397,
	-1, 444,
	88, 987,
	-2, 77,
	-1, 445,
	88, 897,
	-2, 78,
	-1, 450,
	88, 864,
	-2, 680,
	-1, 452,
	88, 931,
	-2, 682,
	-1, 776,
	56, 59,
	58, 59,
	-2, 63,
	-1, 957,
	120, 721,
	-2, 717,
	-1, 1416,
	5, 639,
	17, 639,
	19, 639,
	31, 639,
	59, 639,
	-2, 422,
}

const yyPrivate = 57344

const yyLast = 18009

var yyAct = [...]int{

	402, 1455, 1648, 1334, 1615, 1531, 1658, 1346, 346, 1240,
	1566, 1396, 1068, 1064, 1041, 361, 743, 1260, 1429, 413,
	701, 1393, 76, 3, 449, 1397, 875, 1241, 1077, 1402,
	1111, 375, 344, 332, 1067, 1097, 1228, 1358, 750, 636,
	96, 605, 616, 1408, 296, 994, 1169, 296, 944, 1302,
	1311, 896, 96, 1081, 789, 422, 1043, 1027, 753, 977,
	775, 748, 769, 30, 407, 788, 1020, 574, 760, 74,
	951, 348, 921, 1107, 443, 765, 1038, 438, 888, 435,
	337, 72, 778, 296, 96, 77, 71, 575, 296, 333,
	296, 1208, 336, 907, 1210, 1209, 714, 737, 738, 404,
	317, 306, 594, 331, 294, 1651, 7, 6, 715, 770,
	1635, 5, 1646, 1623, 1643, 1456, 1634, 1622, 1375, 79,
	80, 81, 82, 83, 1488, 387, 446, 393, 394, 391,
	392, 390, 389, 388, 284, 579, 408, 282, 428, 286,
	1058, 395, 396, 437, 1424, 1425, 1423, 405, 576, 318,
	578, 1130, 32, 335, 64, 35, 36, 292, 288, 289,
	290, 98, 99, 100, 635, 1129, 1059, 1060, 1591, 663,
	662, 672, 673, 665, 666, 667, 668, 669, 670, 671,
	664, 1274, 1091, 674, 1273, 630, 790, 1275, 791, 631,
	628, 629, 334, 1293, 1090, 1336, 98, 99, 100, 1098,
	1521, 1479, 1477, 63, 325, 864, 300, 1128, 905, 321,
	327, 323, 623, 624, 633, 303, 98, 99, 100, 863,
	1338, 861, 1645, 310, 1642, 1616, 634, 1333, 1021, 1609,
	1082, 1666, 611, 1567, 613, 595, 285, 1339, 581, 286,
	1261, 1263, 908, 909, 910, 1662, 865, 868, 1569, 639,
	852, 1337, 1084, 1574, 1419, 862, 1418, 308, 283, 1417,
	1125, 1122, 1123, 315, 1121, 1330, 610, 612, 584, 1359,
	577, 1332, 299, 287, 1142, 686, 687, 1141, 1598, 1188,
	1502, 291, 1463, 296, 586, 587, 620, 1270, 296, 1233,
	596, 1185, 1198, 301, 296, 1177, 1147, 1132, 1135, 784,
	296, 603, 764, 699, 609, 96, 601, 618, 1065, 96,
	1361, 96, 674, 98, 99, 100, 1054, 637, 591, 1568,
	312, 304, 1262, 313, 314, 321, 897, 901, 96, 305,
	307, 318, 1000, 302, 320, 319, 330, 1127, 1621, 664,
	1321, 889, 674, 585, 654, 1592, 1607, 1363, 593, 1367,
	1084, 1362, 643, 1360, 600, 608, 1083, 1098, 1365, 1126,
	602, 1660, 1575, 1573, 1661, 86, 1659, 1364, 648, 649,
	653, 651, 1317, 1318, 1319, 1331, 651, 1329, 607, 822,
	1366, 1368, 98, 99, 100, 619, 588, 654, 589, 686,
	687, 590, 654, 597, 598, 599, 1377, 621, 1583, 1131,
	854, 686, 687, 638, 87, 1406, 296, 1385, 65, 1216,
	98, 99, 100, 898, 1133, 684, 662, 672, 673, 665,
	666, 667, 668, 669, 670, 671, 664, 580, 890, 674,
	641, 96, 741, 296, 296, 296, 646, 644, 889, 607,
	702, 645, 96, 792, 1320, 647, 740, 978, 96, 1325,
	1322, 1313, 1323, 1316, 1083, 1312, 316, 1291, 1611, 1314,
	1315, 1667, 606, 810, 1442, 928, 739, 667, 668, 669,
	670, 671, 664, 1324, 978, 674, 1195, 757, 754, 926,
	927, 925, 63, 1626, 446, 717, 719, 721, 723, 725,
	727, 728, 1087, 767, 924, 776, 742, 718, 720, 1088,
	724, 726, 1527, 729, 823, 1668, 652, 653, 651, 281,
	768, 916, 918, 919, 777, 1526, 787, 1306, 917, 782,
	582, 583, 1305, 606, 654, 890, 1162, 1163, 1164, 430,
	836, 839, 840, 841, 842, 843, 844, 1294, 845, 846,
	847, 848, 849, 824, 825, 826, 827, 808, 809, 837,
	406, 811, 1628, 812, 813, 814, 815, 816, 817, 818,
	819, 820, 821, 828, 829, 830, 831, 832, 833, 834,
	835, 1608, 1546, 1084, 296, 1524, 1005, 1006, 850, 96,
	1383, 853, 1303, 855, 296, 296, 96, 96, 96, 338,
	432, 433, 296, 1154, 1183, 296, 1182, 880, 296, 873,
	874, 996, 296, 417, 96, 98, 99, 100, 1580, 96,
	96, 96, 296, 96, 96, 652, 653, 651, 1579, 1002,
	1467, 1644, 838, 1211, 96, 96, 877, 1215, 1438, 652,
	653, 651, 1085, 654, 800, 652, 653, 651, 75, 296,
	1630, 417, 296, 1379, 856, 857, 879, 654, 98, 99,
	100, 1394, 866, 654, 1405, 437, 1467, 1619, 872, 1001,
	892, 672, 673, 665, 666, 667, 668, 669, 670, 671,
	664, 1014, 885, 674, 869, 945, 73, 1083, 652, 653,
	651, 1013, 1080, 1078, 947, 1079, 1467, 417, 1184, 922,
	1467, 1599, 1076, 1082, 1467, 1571, 654, 891, 96, 767,
	1517, 1516, 906, 665, 666, 667, 668, 669, 670, 671,
	664, 1504, 417, 674, 903, 1405, 966, 969, 1013, 948,
	949, 1048, 979, 779, 957, 1498, 956, 1501, 417, 923,
	417, 96, 96, 98, 99, 100, 1467, 1466, 637, 637,
	1023, 961, 955, 652, 653, 651, 98, 99, 100, 702,
	946, 780, 96, 98, 99, 100, 650, 1277, 1582, 296,
	997, 654, 96, 1448, 1447, 1444, 1445, 296, 1024, 573,
	1007, 1444, 1443, 1013, 417, 296, 296, 991, 992, 296,
	296, 1446, 958, 296, 296, 296, 96, 1024, 417, 957,
	1024, 1019, 1229, 32, 1278, 403, 781, 1039, 783, 96,
	575, 650, 417, 1057, 987, 988, 32, 955, 1201, 877,
	1015, 364, 363, 366, 367, 368, 369, 1235, 1200, 1016,
	365, 370, 1013, 1236, 799, 798, 779, 1022, 446, 780,
	1017, 1229, 1003, 410, 867, 97, 1553, 785, 1024, 297,
	1050, 1069, 297, 1047, 63, 63, 32, 97, 1636, 1099,
	1100, 1101, 1056, 296, 96, 1049, 96, 63, 1134, 1051,
	1055, 1052, 296, 296, 296, 296, 296, 1072, 296, 296,
	655, 1533, 296, 96, 781, 1653, 779, 1405, 297, 97,
	1113, 1092, 1509, 297, 63, 297, 1112, 1434, 1281, 296,
	1409, 1410, 296, 1157, 1108, 1103, 296, 63, 296, 296,
	1102, 1335, 1534, 296, 1115, 96, 338, 96, 1649, 1436,
	1412, 1394, 1307, 1116, 902, 712, 871, 1415, 1414, 1249,
	1109, 1110, 1136, 1137, 1138, 1139, 1140, 1248, 1143, 1144,
	311, 1640, 1145, 1029, 1032, 1033, 1034, 1030, 1151, 1031,
	1035, 1252, 1250, 1633, 746, 749, 1253, 1251, 1254, 1148,
	1033, 1034, 1149, 1387, 1218, 751, 1150, 922, 1638, 1227,
	1226, 1298, 974, 1155, 663, 662, 672, 673, 665, 666,
	667, 668, 669, 670, 671, 664, 975, 744, 674, 797,
	604, 1179, 1290, 1613, 328, 1612, 1118, 1551, 1288, 745,
	1283, 1093, 1094, 1095, 1096, 1496, 1529, 923, 1165, 870,
	1037, 411, 412, 1225, 414, 1495, 415, 1104, 1105, 1106,
	417, 1224, 75, 1494, 1217, 296, 1390, 1229, 632, 1655,
	1654, 1170, 408, 1178, 1222, 296, 296, 296, 296, 296,
	1189, 954, 1242, 1186, 895, 758, 1194, 296, 1655, 1596,
	1522, 296, 999, 1237, 410, 296, 73, 78, 70, 296,
	663, 662, 672, 673, 665, 666, 667, 668, 669, 670,
	671, 664, 1, 1259, 674, 1221, 1276, 993, 96, 1212,
	1213, 1232, 1230, 1647, 1214, 995, 1457, 1282, 297, 1530,
	1279, 637, 637, 297, 1266, 1124, 1268, 1243, 1269, 297,
	1246, 1231, 1614, 1255, 1565, 297, 1428, 1075, 1066, 85,
	97, 1265, 614, 572, 97, 84, 97, 1606, 617, 1074,
	1069, 1297, 1271, 1299, 1300, 1301, 96, 96, 423, 1073,
	1286, 1287, 1572, 97, 1520, 1267, 1086, 1292, 1089, 1295,
	1296, 1435, 424, 1284, 1285, 1244, 1245, 881, 1247, 755,
	756, 426, 423, 425, 1289, 1610, 96, 805, 296, 803,
	804, 802, 807, 1304, 1310, 806, 424, 801, 96, 309,
	441, 904, 899, 420, 421, 426, 324, 425, 1036, 793,
	1114, 759, 877, 1326, 1341, 88, 1328, 1327, 96, 1120,
	911, 912, 913, 914, 945, 900, 626, 627, 682, 1223,
	1272, 1343, 447, 440, 1156, 1400, 1357, 1004, 1345, 747,
	1342, 297, 1344, 1493, 1029, 1032, 1033, 1034, 1030, 1389,
	1031, 1035, 1193, 1348, 1409, 1410, 711, 1356, 976, 773,
	1355, 347, 1370, 957, 296, 956, 97, 915, 297, 297,
	297, 1376, 1369, 362, 96, 964, 965, 97, 359, 96,
	96, 1380, 360, 97, 1242, 1395, 1008, 1354, 1234, 1386,
	656, 345, 339, 772, 1028, 1026, 1025, 1384, 436, 1411,
	1407, 771, 1012, 419, 1207, 96, 1487, 1590, 1398, 418,
	973, 53, 1159, 329, 34, 427, 1355, 1404, 60, 96,
	29, 96, 96, 28, 1388, 637, 637, 27, 22, 21,
	1413, 20, 19, 1427, 1420, 18, 24, 17, 16, 1441,
	15, 592, 38, 26, 1422, 1421, 1491, 25, 296, 1439,
	1440, 1431, 14, 1426, 13, 12, 11, 10, 9, 8,
	4, 1069, 1063, 1069, 1432, 1433, 642, 23, 296, 700,
	2, 0, 0, 0, 96, 0, 1458, 96, 96, 96,
	296, 0, 0, 0, 0, 1450, 0, 663, 662, 672,
	673, 665, 666, 667, 668, 669, 670, 671, 664, 0,
	1451, 674, 1453, 0, 0, 0, 0, 0, 1449, 297,
	0, 0, 0, 0, 97, 0, 1470, 0, 0, 297,
	297, 97, 97, 97, 1464, 0, 1465, 297, 1452, 0,
	297, 0, 0, 297, 1475, 0, 0, 297, 0, 97,
	1462, 0, 0, 0, 97, 97, 97, 297, 97, 97,
	0, 622, 0, 625, 1242, 0, 0, 1497, 1492, 97,
	97, 0, 0, 0, 0, 0, 0, 96, 0, 0,
	0, 0, 0, 1506, 297, 96, 0, 297, 0, 1279,
	0, 1515, 1519, 1505, 0, 0, 0, 0, 0, 0,
	96, 752, 0, 0, 0, 0, 0, 96, 0, 0,
	0, 0, 0, 0, 296, 0, 0, 0, 96, 1069,
	0, 0, 982, 0, 1539, 0, 0, 0, 0, 1523,
	0, 1525, 0, 0, 0, 0, 0, 1537, 877, 0,
	1535, 0, 0, 97, 0, 0, 0, 0, 0, 1532,
	0, 0, 96, 96, 0, 96, 0, 1545, 1196, 1538,
	96, 0, 96, 96, 96, 296, 1550, 1559, 96, 1560,
	1562, 1563, 0, 1554, 1552, 1558, 97, 97, 0, 1564,
	1398, 1219, 1220, 749, 96, 296, 1570, 1577, 1576, 1578,
	0, 1584, 1472, 1473, 0, 1474, 0, 97, 1476, 416,
	1478, 0, 0, 0, 297, 0, 0, 97, 0, 0,
	0, 0, 297, 0, 0, 1597, 0, 0, 1605, 0,
	297, 297, 0, 0, 297, 297, 1604, 0, 297, 297,
	297, 97, 1603, 96, 96, 1398, 0, 0, 1617, 0,
	0, 0, 0, 0, 97, 1585, 1618, 0, 0, 96,
	0, 0, 0, 0, 0, 1242, 1624, 0, 0, 0,
	296, 0, 0, 1518, 0, 0, 0, 96, 0, 0,
	0, 0, 0, 1632, 0, 1532, 1069, 0, 32, 33,
	64, 35, 36, 0, 1639, 1637, 0, 96, 0, 0,
	0, 0, 0, 0, 1641, 0, 0, 68, 297, 97,
	1652, 97, 37, 56, 57, 0, 59, 297, 297, 297,
	297, 297, 1663, 297, 297, 0, 0, 297, 97, 0,
	1627, 0, 0, 0, 0, 46, 0, 0, 0, 63,
	0, 851, 0, 0, 297, 0, 0, 297, 858, 859,
	860, 297, 0, 297, 297, 0, 0, 0, 297, 0,
	97, 0, 97, 0, 0, 0, 878, 0, 0, 0,
	0, 882, 883, 884, 0, 886, 887, 0, 0, 0,
	0, 0, 0, 0, 0, 1378, 893, 894, 0, 0,
	0, 0, 0, 0, 0, 962, 963, 0, 0, 968,
	971, 972, 0, 0, 0, 39, 40, 42, 41, 44,
	0, 58, 0, 0, 0, 0, 0, 0, 0, 1391,
	0, 0, 376, 31, 986, 0, 0, 989, 990, 0,
	0, 0, 0, 0, 45, 67, 66, 0, 0, 54,
	55, 43, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 31, 47, 48, 0, 49, 50,
	51, 52, 0, 0, 0, 0, 0, 0, 0, 0,
	297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	297, 297, 297, 297, 297, 0, 0, 0, 0, 0,
	0, 0, 297, 1485, 0, 409, 297, 0, 0, 0,
	297, 0, 0, 0, 297, 0, 0, 0, 658, 0,
	661, 0, 1490, 0, 0, 0, 675, 676, 677, 678,
	679, 680, 681, 97, 659, 660, 657, 663, 662, 672,
	673, 665, 666, 667, 668, 669, 670, 671, 664, 0,
	1484, 674, 0, 0, 65, 0, 0, 0, 0, 0,
	0, 0, 373, 663, 662, 672, 673, 665, 666, 667,
	668, 669, 670, 671, 664, 0, 0, 674, 0, 1489,
	0, 97, 97, 663, 662, 672, 673, 665, 666, 667,
	668, 669, 670, 671, 664, 0, 1483, 674, 0, 338,
	0, 0, 95, 0, 0, 0, 1507, 0, 0, 1508,
	0, 97, 1510, 297, 326, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 0, 0, 1117, 1482, 1119, 0,
	663, 662, 672, 673, 665, 666, 667, 668, 669, 670,
	671, 664, 0, 97, 674, 1146, 448, 0, 0, 0,
	0, 0, 0, 0, 1174, 1175, 0, 0, 0, 0,
	0, 0, 62, 61, 69, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1192, 663, 662, 672, 673,
	665, 666, 667, 668, 669, 670, 671, 664, 0, 297,
	674, 0, 0, 0, 1549, 338, 0, 0, 0, 97,
	0, 0, 0, 0, 97, 97, 0, 663, 662, 672,
	673, 665, 666, 667, 668, 669, 670, 671, 664, 0,
	0, 674, 0, 0, 0, 0, 0, 0, 0, 1349,
	97, 0, 0, 0, 0, 0, 0, 615, 0, 0,
	0, 615, 0, 615, 97, 0, 97, 97, 0, 663,
	662, 672, 673, 665, 666, 667, 668, 669, 670, 671,
	664, 1171, 31, 674, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 297, 0, 683, 685, 0, 0, 0,
	0, 663, 662, 672, 673, 665, 666, 667, 668, 669,
	670, 671, 664, 297, 0, 674, 0, 0, 0, 97,
	0, 0, 97, 97, 97, 297, 698, 0, 0, 0,
	703, 704, 705, 706, 707, 708, 709, 710, 0, 713,
	716, 716, 716, 722, 716, 716, 722, 716, 730, 731,
	732, 733, 734, 735, 736, 0, 0, 0, 0, 0,
	0, 0, 31, 959, 960, 663, 662, 672, 673, 665,
	666, 667, 668, 669, 670, 671, 664, 0, 0, 674,
	0, 0, 0, 0, 0, 0, 774, 448, 0, 0,
	0, 448, 0, 448, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 998, 0, 0, 0, 0, 1309,
	640, 0, 97, 0, 0, 0, 0, 0, 0, 0,
	97, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 0, 0, 1340, 0,
	0, 0, 97, 0, 0, 0, 0, 0, 0, 297,
	0, 0, 0, 97, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 97, 0,
	97, 0, 0, 0, 0, 97, 0, 97, 97, 97,
	297, 0, 0, 97, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 762, 0, 0, 0, 0, 0, 97,
	297, 0, 0, 0, 448, 0, 0, 0, 0, 0,
	794, 615, 0, 0, 0, 0, 0, 0, 615, 615,
	615, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 615, 0, 0, 0,
	0, 615, 615, 615, 0, 615, 615, 0, 97, 97,
	0, 0, 0, 0, 0, 0, 615, 615, 0, 0,
	0, 0, 0, 0, 97, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 297, 0, 0, 0, 0,
	0, 0, 97, 0, 0, 0, 0, 0, 0, 0,
	1172, 0, 0, 0, 1173, 0, 0, 0, 0, 0,
	0, 0, 97, 0, 0, 1180, 1181, 0, 0, 0,
	0, 1187, 0, 0, 1190, 1191, 0, 0, 0, 0,
	0, 0, 1197, 0, 0, 0, 1199, 0, 0, 1202,
	1203, 1204, 1205, 1206, 0, 0, 0, 0, 0, 0,
	0, 448, 0, 0, 0, 0, 0, 0, 448, 448,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 448, 0, 0, 0,
	0, 448, 448, 448, 0, 448, 448, 0, 0, 0,
	0, 1257, 1258, 0, 0, 0, 448, 448, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1040, 0, 0,
	0, 774, 0, 0, 0, 774, 0, 0, 0, 0,
	0, 0, 1528, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	950, 0, 448, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 980, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 615, 0, 615, 0,
	0, 0, 0, 984, 985, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 615, 0, 0, 0, 341,
	0, 0, 0, 0, 1009, 0, 0, 1352, 1353, 0,
	0, 0, 0, 0, 762, 0, 0, 448, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 448, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 448, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1176, 0,
	0, 409, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1416, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 448, 0, 448, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 774, 0, 0,
	0, 0, 0, 1238, 1239, 0, 0, 774, 774, 774,
	774, 774, 0, 0, 0, 0, 0, 1158, 0, 1160,
	0, 0, 0, 1040, 0, 1264, 0, 0, 0, 0,
	0, 774, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1469, 0, 0,
	0, 1471, 0, 0, 0, 0, 0, 0, 0, 374,
	0, 0, 1480, 1481, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1499, 1500, 0, 1503, 0, 0, 0, 615,
	0, 0, 0, 295, 0, 0, 322, 0, 0, 0,
	0, 0, 0, 1514, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 615, 0,
	0, 0, 0, 0, 0, 0, 980, 0, 0, 431,
	0, 0, 439, 0, 0, 0, 0, 295, 0, 295,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1561, 0, 0, 0, 0, 688,
	689, 690, 691, 692, 693, 694, 695, 696, 697, 1399,
	0, 31, 0, 0, 0, 0, 0, 0, 1308, 448,
	0, 0, 0, 1586, 1587, 1588, 1589, 0, 1593, 0,
	1594, 1595, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1600, 0, 1601, 1602, 0, 448, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1347, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1620, 0, 0, 0, 0, 0, 0,
	448, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1629, 0, 0,
	0, 448, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 295, 0, 0, 0, 448, 295, 980, 1664,
	1665, 1401, 1403, 295, 0, 0, 0, 0, 1486, 295,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1403, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 448, 0, 448, 1430, 0, 0, 0, 0, 0,
	1511, 1512, 1513, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 615, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1454, 0, 0, 1459,
	1460, 1461, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 295, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 431,
	0, 1399, 0, 31, 0, 0, 0, 0, 0, 0,
	0, 0, 295, 295, 295, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1581, 0, 0, 0, 920, 0, 980, 929,
	930, 931, 932, 933, 934, 935, 936, 937, 938, 939,
	940, 941, 942, 943, 0, 0, 1399, 0, 0, 448,
	0, 0, 0, 0, 0, 0, 0, 1347, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 448, 0, 0, 0, 0, 0, 0, 448,
	0, 0, 0, 0, 0, 0, 983, 0, 0, 0,
	1536, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1555, 1556, 0, 1557, 0, 0,
	0, 0, 1347, 0, 1347, 1347, 1347, 0, 1650, 0,
	1430, 0, 0, 295, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 295, 295, 0, 1347, 0, 0, 0,
	0, 295, 0, 0, 295, 0, 0, 295, 0, 0,
	0, 876, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 295, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 448, 448, 0, 295, 0,
	0, 295, 0, 0, 0, 0, 0, 0, 0, 980,
	0, 1625, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1631,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1347,
	0, 0, 0, 0, 0, 0, 0, 0, 431, 876,
	0, 0, 0, 431, 431, 0, 0, 431, 431, 431,
	0, 0, 0, 981, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1166, 1167, 1168, 0,
	0, 0, 431, 431, 431, 431, 431, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 295, 0,
	0, 0, 0, 0, 876, 0, 295, 0, 0, 0,
	0, 0, 0, 0, 295, 1045, 0, 0, 295, 295,
	0, 0, 295, 1053, 876, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 295, 0, 0, 0, 0, 0, 0, 0,
	0, 295, 295, 295, 295, 295, 0, 295, 295, 0,
	0, 295, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 295, 0,
	0, 295, 0, 0, 0, 295, 0, 1152, 1153, 0,
	0, 0, 295, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 431, 431, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1350, 1351, 0, 431, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1371, 1372, 0, 1373, 1374,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1381, 1382, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 431, 295, 0, 0, 0, 0, 0,
	0, 0, 0, 981, 295, 295, 295, 295, 295, 0,
	0, 0, 0, 0, 0, 0, 1256, 0, 0, 0,
	295, 0, 0, 0, 1045, 0, 0, 0, 295, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1437, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 876, 0, 1468,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 431, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 876, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 295, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 981, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1540, 1541, 1542, 1543, 1544, 0, 0, 0,
	1547, 1548, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 295, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 295, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 295,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 981, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1656, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 876, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1045, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 295, 0, 0, 0, 0, 0,
	0, 0, 558, 546, 0, 503, 561, 476, 493, 569,
	494, 497, 534, 461, 516, 191, 491, 0, 480, 456,
	487, 457, 478, 505, 131, 509, 475, 548, 519, 560,
	162, 0, 481, 567, 164, 525, 0, 241, 179, 0,
	0, 0, 507, 550, 514, 543, 502, 535, 466, 524,
	562, 492, 532, 563, 0, 0, 981, 98, 99, 100,
	0, 1070, 1071, 0, 0, 0, 0, 0, 121, 295,
	529, 557, 489, 531, 533, 571, 455, 526, 0, 459,
	462, 568, 553, 484, 485, 1280, 0, 0, 0, 0,
	0, 0, 506, 515, 540, 500, 0, 0, 0, 0,
	0, 0, 0, 0, 482, 0, 523, 0, 0, 0,
	463, 460, 0, 0, 0, 0, 504, 0, 0, 0,
	465, 0, 483, 541, 0, 453, 141, 545, 552, 501,
	298, 556, 499, 498, 559, 210, 0, 246, 144, 161,
	117, 158, 102, 113, 0, 143, 188, 218, 222, 549,
	479, 488, 125, 486, 220, 198, 262, 522, 200, 219,
	165, 252, 211, 261, 271, 272, 249, 269, 276, 237,
	106, 248, 260, 122, 231, 0, 0, 0, 108, 258,
	244, 177, 154, 155, 107, 0, 216, 130, 139, 127,
	190, 255, 256, 126, 279, 114, 268, 110, 115, 267,
	184, 251, 259, 178, 170, 109, 257, 176, 169, 160,
	134, 146, 208, 167, 209, 147, 181, 180, 182, 0,
	458, 0, 242, 265, 280, 119, 474, 250, 274, 275,
	0, 212, 120, 140, 133, 207, 138, 183, 116, 149,
	239, 159, 166, 215, 278, 197, 221, 123, 264, 240,
	470, 473, 468, 469, 517, 518, 564, 565, 566, 542,
	464, 0, 471, 472, 0, 547, 554, 555, 521, 101,
	111, 163, 277, 213, 137, 266, 454, 467, 129, 477,
	0, 0, 490, 495, 496, 508, 510, 511, 512, 513,
	520, 527, 528, 530, 536, 537, 538, 539, 544, 551,
	570, 103, 104, 112, 118, 124, 128, 132, 135, 142,
	145, 148, 150, 151, 152, 157, 168, 172, 173, 174,
	175, 185, 186, 187, 189, 192, 193, 194, 195, 196,
	199, 201, 202, 203, 204, 205, 206, 214, 217, 223,
	224, 225, 226, 227, 228, 230, 233, 234, 235, 236,
	243, 247, 253, 254, 263, 270, 273, 0, 0, 0,
	0, 105, 156, 171, 229, 232, 238, 245, 136, 153,
	558, 546, 0, 503, 561, 476, 493, 569, 494, 497,
	534, 461, 516, 191, 491, 0, 480, 456, 487, 457,
	478, 505, 131, 509, 475, 548, 519, 560, 162, 0,
	481, 567, 164, 525, 0, 241, 179, 0, 0, 0,
	507, 550, 514, 543, 502, 535, 466, 524, 562, 492,
	532, 563, 0, 0, 0, 98, 99, 100, 0, 1070,
	1071, 0, 0, 0, 0, 0, 121, 0, 529, 557,
	489, 531, 533, 571, 455, 526, 0, 459, 462, 568,
	553, 484, 485, 0, 0, 0, 0, 0, 0, 0,
	506, 515, 540, 500, 0, 0, 0, 0, 0, 0,
	0, 0, 482, 0, 523, 0, 0, 0, 463, 460,
	0, 0, 0, 0, 504, 0, 0, 0, 465, 0,
	483, 541, 0, 453, 141, 545, 552, 501, 298, 556,
	499, 498, 559, 210, 0, 246, 144, 161, 117, 158,
	102, 113, 0, 143, 188, 218, 222, 549, 479, 488,
	125, 486, 220, 198, 262, 522, 200, 219, 165, 252,
	211, 261, 271, 272, 249, 269, 276, 237, 106, 248,
	260, 122, 231, 0, 0, 0, 108, 258, 244, 177,
	154, 155, 107, 0, 216, 130, 139, 127, 190, 255,
	256, 126, 279, 114, 268, 110, 115, 267, 184, 251,
	259, 178, 170, 109, 257, 176, 169, 160, 134, 146,
	208, 167, 209, 147, 181, 180, 182, 0, 458, 0,
	242, 265, 280, 119, 474, 250, 274, 275, 0, 212,
	120, 140, 133, 207, 138, 183, 116, 149, 239, 159,
	166, 215, 278, 197, 221, 123, 264, 240, 470, 473,
	468, 469, 517, 518, 564, 565, 566, 542, 464, 0,
	471, 472, 0, 547, 554, 555, 521, 101, 111, 163,
	277, 213, 137, 266, 454, 467, 129, 477, 0, 0,
	490, 495, 496, 508, 510, 511, 512, 513, 520, 527,
	528, 530, 536, 537, 538, 539, 544, 551, 570, 103,
	104, 112, 118, 124, 128, 132, 135, 142, 145, 148,
	150, 151, 152, 157, 168, 172, 173, 174, 175, 185,
	186, 187, 189, 192, 193, 194, 195, 196, 199, 201,
	202, 203, 204, 205, 206, 214, 217, 223, 224, 225,
	226, 227, 228, 230, 233, 234, 235, 236, 243, 247,
	253, 254, 263, 270, 273, 0, 0, 0, 0, 105,
	156, 171, 229, 232, 238, 245, 136, 153, 558, 546,
	0, 503, 561, 476, 493, 569, 494, 497, 534, 461,
	516, 191, 491, 0, 480, 456, 487, 457, 478, 505,
	131, 509, 475, 548, 519, 560, 162, 0, 481, 567,
	164, 525, 0, 241, 179, 0, 0, 0, 507, 550,
	514, 543, 502, 535, 466, 524, 562, 492, 532, 563,
	63, 0, 0, 98, 99, 100, 0, 0, 0, 0,
	0, 0, 0, 0, 121, 0, 529, 557, 489, 531,
	533, 571, 455, 526, 0, 459, 462, 568, 553, 484,
	485, 0, 0, 0, 0, 0, 0, 0, 506, 515,
	540, 500, 0, 0, 0, 0, 0, 0, 0, 0,
	482, 0, 523, 0, 0, 0, 463, 460, 0, 0,
	0, 0, 504, 0, 0, 0, 465, 0, 483, 541,
	0, 453, 141, 545, 552, 501, 298, 556, 499, 498,
	559, 210, 0, 246, 144, 161, 117, 158, 102, 113,
	0, 143, 188, 218, 222, 549, 479, 488, 125, 486,
	220, 198, 262, 522, 200, 219, 165, 252, 211, 261,
	271, 272, 249, 269, 276, 237, 106, 248, 260, 122,
	231, 0, 0, 0, 108, 258, 244, 177, 154, 155,
	107, 0, 216, 130, 139, 127, 190, 255, 256, 126,
	279, 114, 268, 110, 115, 267, 184, 251, 259, 178,
	170, 109, 257, 176, 169, 160, 134, 146, 208, 167,
	209, 147, 181, 180, 182, 0, 458, 0, 242, 265,
	280, 119, 474, 250, 274, 275, 0, 212, 120, 140,
	133, 207, 138, 183, 116, 149, 239, 159, 166, 215,
	278, 197, 221, 123, 264, 240, 470, 473, 468, 469,
	517, 518, 564, 565, 566, 542, 464, 0, 471, 472,
	0, 547, 554, 555, 521, 101, 111, 163, 277, 213,
	137, 266, 454, 467, 129, 477, 0, 0, 490, 495,
	496, 508, 510, 511, 512, 513, 520, 527, 528, 530,
	536, 537, 538, 539, 544, 551, 570, 103, 104, 112,
	118, 124, 128, 132, 135, 142, 145, 148, 150, 151,
	152, 157, 168, 172, 173, 174, 175, 185, 186, 187,
	189, 192, 193, 194, 195, 196, 199, 201, 202, 203,
	204, 205, 206, 214, 217, 223, 224, 225, 226, 227,
	228, 230, 233, 234, 235, 236, 243, 247, 253, 254,
	263, 270, 273, 0, 0, 0, 0, 105, 156, 171,
	229, 232, 238, 245, 136, 153, 558, 546, 0, 503,
	561, 476, 493, 569, 494, 497, 534, 461, 516, 191,
	491, 0, 480, 456, 487, 457, 478, 505, 131, 509,
	475, 548, 519, 560, 162, 0, 481, 567, 164, 525,
	0, 241, 179, 0, 0, 0, 507, 550, 514, 543,
	502, 535, 466, 524, 562, 492, 532, 563, 0, 0,
	0, 98, 99, 100, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 529, 557, 489, 531, 533, 571,
	455, 526, 0, 459, 462, 568, 553, 484, 485, 0,
	0, 0, 0, 0, 0, 0, 506, 515, 540, 500,
	0, 0, 0, 0, 0, 0, 1392, 0, 482, 0,
	523, 0, 0, 0, 463, 460, 0, 0, 0, 0,
	504, 0, 0, 0, 465, 0, 483, 541, 0, 453,
	141, 545, 552, 501, 298, 556, 499, 498, 559, 210,
	0, 246, 144, 161, 117, 158, 102, 113, 0, 143,
	188, 218, 222, 549, 479, 488, 125, 486, 220, 198,
	262, 522, 200, 219, 165, 252, 211, 261, 271, 272,
	249, 269, 276, 237, 106, 248, 260, 122, 231, 0,
	0, 0, 108, 258, 244, 177, 154, 155, 107, 0,
	216, 130, 139, 127, 190, 255, 256, 126, 279, 114,
	268, 110, 115, 267, 184, 251, 259, 178, 170, 109,
	257, 176, 169, 160, 134, 146, 208, 167, 209, 147,
	181, 180, 182, 0, 458, 0, 242, 265, 280, 119,
	474, 250, 274, 275, 0, 212, 120, 140, 133, 207,
	138, 183, 116, 149, 239, 159, 166, 215, 278, 197,
	221, 123, 264, 240, 470, 473, 468, 469, 517, 518,
	564, 565, 566, 542, 464, 0, 471, 472, 0, 547,
	554, 555, 521, 101, 111, 163, 277, 213, 137, 266,
	454, 467, 129, 477, 0, 0, 490, 495, 496, 508,
	510, 511, 512, 513, 520, 527, 528, 530, 536, 537,
	538, 539, 544, 551, 570, 103, 104, 112, 118, 124,
	128, 132, 135, 142, 145, 148, 150, 151, 152, 157,
	168, 172, 173, 174, 175, 185, 186, 187, 189, 192,
	193, 194, 195, 196, 199, 201, 202, 203, 204, 205,
	206, 214, 217, 223, 224, 225, 226, 227, 228, 230,
	233, 234, 235, 236, 243, 247, 253, 254, 263, 270,
	273, 0, 0, 0, 0, 105, 156, 171, 229, 232,
	238, 245, 136, 153, 558, 546, 0, 503, 561, 476,
	493, 569, 494, 497, 534, 461, 516, 191, 491, 0,
	480, 456, 487, 457, 478, 505, 131, 509, 475, 548,
	519, 560, 162, 0, 481, 567, 164, 525, 0, 241,
	179, 0, 0, 0, 507, 550, 514, 543, 502, 535,
	466, 524, 562, 492, 532, 563, 0, 0, 0, 98,
	99, 100, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 529, 557, 489, 531, 533, 571, 455, 526,
	0, 459, 462, 568, 553, 484, 485, 0, 0, 0,
	0, 0, 0, 0, 506, 515, 540, 500, 0, 0,
	0, 0, 0, 0, 1054, 0, 482, 0, 523, 0,
	0, 0, 463, 460, 0, 0, 0, 0, 504, 0,
	0, 0, 465, 0, 483, 541, 0, 453, 141, 545,
	552, 501, 298, 556, 499, 498, 559, 210, 0, 246,
	144, 161, 117, 158, 102, 113, 0, 143, 188, 218,
	222, 549, 479, 488, 125, 486, 220, 198, 262, 522,
	200, 219, 165, 252, 211, 261, 271, 272, 249, 269,
	276, 237, 106, 248, 260, 122, 231, 0, 0, 0,
	108, 258, 244, 177, 154, 155, 107, 0, 216, 130,
	139, 127, 190, 255, 256, 126, 279, 114, 268, 110,
	115, 267, 184, 251, 259, 178, 170, 109, 257, 176,
	169, 160, 134, 146, 208, 167, 209, 147, 181, 180,
	182, 0, 458, 0, 242, 265, 280, 119, 474, 250,
	274, 275, 0, 212, 120, 140, 133, 207, 138, 183,
	116, 149, 239, 159, 166, 215, 278, 197, 221, 123,
	264, 240, 470, 473, 468, 469, 517, 518, 564, 565,
	566, 542, 464, 0, 471, 472, 0, 547, 554, 555,
	521, 101, 111, 163, 277, 213, 137, 266, 454, 467,
	129, 477, 0, 0, 490, 495, 496, 508, 510, 511,
	512, 513, 520, 527, 528, 530, 536, 537, 538, 539,
	544, 551, 570, 103, 104, 112, 118, 124, 128, 132,
	135, 142, 145, 148, 150, 151, 152, 157, 168, 172,
	173, 174, 175, 185, 186, 187, 189, 192, 193, 194,
	195, 196, 199, 201, 202, 203, 204, 205, 206, 214,
	217, 223, 224, 225, 226, 227, 228, 230, 233, 234,
	235, 236, 243, 247, 253, 254, 263, 270, 273, 0,
	0, 0, 0, 105, 156, 171, 229, 232, 238, 245,
	136, 153, 558, 546, 0, 503, 561, 476, 493, 569,
	494, 497, 534, 461, 516, 191, 491, 0, 480, 456,
	487, 457, 478, 505, 131, 509, 475, 548, 519, 560,
	162, 0, 481, 567, 164, 525, 0, 241, 179, 0,
	0, 0, 507, 550, 514, 543, 502, 535, 466, 524,
	562, 492, 532, 563, 0, 0, 0, 98, 99, 100,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 0,
	529, 557, 489, 531, 533, 571, 455, 526, 0, 459,
	462, 568, 553, 484, 485, 0, 0, 0, 0, 0,
	0, 0, 506, 515, 540, 500, 0, 0, 0, 0,
	0, 0, 1018, 0, 482, 0, 523, 0, 0, 0,
	463, 460, 0, 0, 0, 0, 504, 0, 0, 0,
	465, 0, 483, 541, 0, 453, 141, 545, 552, 501,
	298, 556, 499, 498, 559, 210, 0, 246, 144, 161,
	117, 158, 102, 113, 0, 143, 188, 218, 222, 549,
	479, 488, 125, 486, 220, 198, 262, 522, 200, 219,
	165, 252, 211, 261, 271, 272, 249, 269, 276, 237,
	106, 248, 260, 122, 231, 0, 0, 0, 108, 258,
	244, 177, 154, 155, 107, 0, 216, 130, 139, 127,
	190, 255, 256, 126, 279, 114, 268, 110, 115, 267,
	184, 251, 259, 178, 170, 109, 257, 176, 169, 160,
	134, 146, 208, 167, 209, 147, 181, 180, 182, 0,
	458, 0, 242, 265, 280, 119, 474, 250, 274, 275,
	0, 212, 120, 140, 133, 207, 138, 183, 116, 149,
	239, 159, 166, 215, 278, 197, 221, 123, 264, 240,
	470, 473, 468, 469, 517, 518, 564, 565, 566, 542,
	464, 0, 471, 472, 0, 547, 554, 555, 521, 101,
	111, 163, 277, 213, 137, 266, 454, 467, 129, 477,
	0, 0, 490, 495, 496, 508, 510, 511, 512, 513,
	520, 527, 528, 530, 536, 537, 538, 539, 544, 551,
	570, 103, 104, 112, 118, 124, 128, 132, 135, 142,
	145, 148, 150, 151, 152, 157, 168, 172, 173, 174,
	175, 185, 186, 187, 189, 192, 193, 194, 195, 196,
	199, 201, 202, 203, 204, 205, 206, 214, 217, 223,
	224, 225, 226, 227, 228, 230, 233, 234, 235, 236,
	243, 247, 253, 254, 263, 270, 273, 0, 0, 0,
	0, 105, 156, 171, 229, 232, 238, 245, 136, 153,
	558, 546, 0, 503, 561, 476, 493, 569, 494, 497,
	534, 461, 516, 191, 491, 0, 480, 456, 487, 457,
	478, 505, 131, 509, 475, 548, 519, 560, 162, 0,
	481, 567, 164, 525, 0, 241, 179, 0, 0, 0,
	507, 550, 514, 543, 502, 535, 466, 524, 562, 492,
	532, 563, 0, 0, 0, 98, 99, 100, 0, 0,
	0, 0, 0, 0, 0, 0, 121, 0, 529, 557,
	489, 531, 533, 571, 455, 526, 0, 459, 462, 568,
	553, 484, 485, 0, 0, 0, 0, 0, 0, 0,
	506, 515, 540, 500, 0, 0, 0, 0, 0, 0,
	0, 0, 482, 0, 523, 0, 0, 0, 463, 460,
	0, 0, 0, 0, 504, 0, 0, 0, 465, 0,
	483, 541, 0, 453, 141, 545, 552, 501, 298, 556,
	499, 498, 559, 210, 0, 246, 144, 161, 117, 158,
	102, 113, 0, 143, 188, 218, 222, 549, 479, 488,
	125, 486, 220, 198, 262, 522, 200, 219, 165, 252,
	211, 261, 271, 272, 249, 269, 276, 237, 106, 248,
	260, 122, 231, 0, 0, 0, 108, 258, 244, 177,
	154, 155, 107, 0, 216, 130, 139, 127, 190, 255,
	256, 126, 279, 114, 268, 110, 115, 267, 184, 251,
	259, 178, 170, 109, 257, 176, 169, 160, 134, 146,
	208, 167, 209, 147, 181, 180, 182, 0, 458, 0,
	242, 265, 280, 119, 474, 250, 274, 275, 0, 212,
	120, 140, 133, 207, 138, 183, 116, 149, 239, 159,
	166, 215, 278, 197, 221, 123, 264, 240, 470, 473,
	468, 469, 517, 518, 564, 565, 566, 542, 464, 0,
	471, 472, 0, 547, 554, 555, 521, 101, 111, 163,
	277, 213, 137, 266, 454, 467, 129, 477, 0, 0,
	490, 495, 496, 508, 510, 511, 512, 513, 520, 527,
	528, 530, 536, 537, 538, 539, 544, 551, 570, 103,
	104, 112, 118, 124, 128, 132, 135, 142, 145, 148,
	150, 151, 152, 157, 168, 172, 173, 174, 175, 185,
	186, 187, 189, 192, 193, 194, 195, 196, 199, 201,
	202, 203, 204, 205, 206, 214, 217, 223, 224, 225,
	226, 227, 228, 230, 233, 234, 235, 236, 243, 247,
	253, 254, 263, 270, 273, 0, 0, 0, 0, 105,
	156, 171, 229, 232, 238, 245, 136, 153, 558, 546,
	0, 503, 561, 476, 493, 569, 494, 497, 534, 461,
	516, 191, 491, 0, 480, 456, 487, 457, 478, 505,
	131, 509, 475, 548, 519, 560, 162, 0, 481, 567,
	164, 525, 0, 241, 179, 0, 0, 0, 507, 550,
	514, 543, 502, 535, 466, 524, 562, 492, 532, 563,
	0, 0, 0, 98, 99, 100, 0, 0, 0, 0,
	0, 0, 0, 0, 121, 0, 529, 557, 489, 531,
	533, 571, 455, 526, 0, 459, 462, 568, 553, 484,
	485, 0, 0, 0, 0, 0, 0, 0, 506, 515,
	540, 500, 0, 0, 0, 0, 0, 0, 0, 0,
	482, 0, 523, 0, 0, 0, 463, 460, 0, 0,
	0, 0, 504, 0, 0, 0, 465, 0, 483, 541,
	0, 453, 141, 545, 552, 501, 298, 556, 499, 498,
	559, 210, 0, 246, 144, 161, 117, 158, 102, 113,
	0, 143, 188, 218, 222, 549, 479, 488, 125, 486,
	220, 198, 262, 522, 200, 219, 165, 252, 211, 261,
	271, 272, 249, 269, 276, 237, 106, 248, 260, 122,
	231, 0, 0, 0, 108, 258, 244, 177, 154, 155,
	107, 0, 216, 130, 139, 127, 190, 255, 256, 126,
	279, 114, 268, 110, 451, 267, 184, 251, 259, 178,
	170, 109, 257, 176, 169, 160, 134, 146, 208, 167,
	209, 147, 181, 180, 182, 0, 458, 0, 242, 265,
	280, 119, 474, 250, 274, 275, 0, 212, 120, 140,
	133, 207, 138, 452, 450, 149, 239, 159, 166, 215,
	278, 197, 221, 123, 264, 240, 470, 473, 468, 469,
	517, 518, 564, 565, 566, 542, 464, 0, 471, 472,
	0, 547, 554, 555, 521, 101, 111, 163, 277, 213,
	137, 266, 454, 467, 129, 477, 0, 0, 490, 495,
	496, 508, 510, 511, 512, 513, 520, 527, 528, 530,
	536, 537, 538, 539, 544, 551, 570, 103, 104, 112,
	118, 124, 128, 132, 135, 142, 145, 148, 150, 151,
	152, 157, 168, 172, 173, 174, 175, 185, 186, 187,
	189, 192, 193, 194, 195, 196, 199, 201, 202, 203,
	204, 205, 206, 214, 217, 223, 224, 225, 226, 227,
	228, 230, 233, 234, 235, 236, 243, 247, 253, 254,
	263, 270, 273, 0, 0, 0, 0, 105, 156, 171,
	229, 232, 238, 245, 136, 153, 558, 546, 0, 503,
	561, 476, 493, 569, 494, 497, 534, 461, 516, 191,
	491, 0, 480, 456, 487, 457, 478, 505, 131, 509,
	475, 548, 519, 560, 162, 0, 481, 567, 164, 525,
	0, 241, 179, 0, 0, 0, 507, 550, 514, 543,
	502, 535, 466, 524, 562, 492, 532, 563, 0, 0,
	0, 98, 99, 100, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 529, 557, 489, 531, 533, 571,
	455, 526, 0, 459, 462, 568, 553, 484, 485, 0,
	0, 0, 0, 0, 0, 0, 506, 515, 540, 500,
	0, 0, 0, 0, 0, 0, 0, 0, 482, 0,
	523, 0, 0, 0, 463, 460, 0, 0, 0, 0,
	504, 0, 0, 0, 465, 0, 483, 541, 0, 453,
	141, 545, 552, 501, 298, 556, 499, 498, 559, 210,
	0, 246, 144, 161, 117, 158, 102, 113, 0, 143,
	188, 218, 222, 549, 479, 488, 125, 486, 220, 198,
	262, 522, 200, 219, 165, 252, 211, 261, 271, 272,
	249, 269, 276, 237, 106, 248, 786, 122, 231, 0,
	0, 0, 108, 258, 244, 177, 154, 155, 107, 0,
	216, 130, 139, 127, 190, 255, 256, 126, 279, 114,
	268, 110, 451, 267, 184, 251, 259, 178, 170, 109,
	257, 176, 169, 160, 134, 146, 208, 167, 209, 147,
	181, 180, 182, 0, 458, 0, 242, 265, 280, 119,
	474, 250, 274, 275, 0, 212, 120, 140, 133, 207,
	138, 452, 450, 149, 239, 159, 166, 215, 278, 197,
	221, 123, 264, 240, 470, 473, 468, 469, 517, 518,
	564, 565, 566, 542, 464, 0, 471, 472, 0, 547,
	554, 555, 521, 101, 111, 163, 277, 213, 137, 266,
	454, 467, 129, 477, 0, 0, 490, 495, 496, 508,
	510, 511, 512, 513, 520, 527, 528, 530, 536, 537,
	538, 539, 544, 551, 570, 103, 104, 112, 118, 124,
	128, 132, 135, 142, 145, 148, 150, 151, 152, 157,
	168, 172, 173, 174, 175, 185, 186, 187, 189, 192,
	193, 194, 195, 196, 199, 201, 202, 203, 204, 205,
	206, 214, 217, 223, 224, 225, 226, 227, 228, 230,
	233, 234, 235, 236, 243, 247, 253, 254, 263, 270,
	273, 0, 0, 0, 0, 105, 156, 171, 229, 232,
	238, 245, 136, 153, 558, 546, 0, 503, 561, 476,
	493, 569, 494, 497, 534, 461, 516, 191, 491, 0,
	480, 456, 487, 457, 478, 505, 131, 509, 475, 548,
	519, 560, 162, 0, 481, 567, 164, 525, 0, 241,
	179, 0, 0, 0, 507, 550, 514, 543, 502, 535,
	466, 524, 562, 492, 532, 563, 0, 0, 0, 98,
	99, 100, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 529, 557, 489, 531, 533, 571, 455, 526,
	0, 459, 462, 568, 553, 484, 485, 0, 0, 0,
	0, 0, 0, 0, 506, 515, 540, 500, 0, 0,
	0, 0, 0, 0, 0, 0, 482, 0, 523, 0,
	0, 0, 463, 460, 0, 0, 0, 0, 504, 0,
	0, 0, 465, 0, 483, 541, 0, 453, 141, 545,
	552, 501, 298, 556, 499, 498, 559, 210, 0, 246,
	144, 161, 117, 158, 102, 113, 0, 143, 188, 218,
	222, 549, 479, 488, 125, 486, 220, 198, 262, 522,
	200, 219, 165, 252, 211, 261, 271, 272, 249, 269,
	276, 237, 106, 248, 442, 122, 231, 0, 0, 0,
	108, 258, 244, 177, 154, 155, 107, 0, 216, 130,
	139, 127, 190, 255, 256, 126, 279, 114, 268, 110,
	451, 267, 184, 251, 259, 178, 170, 109, 257, 176,
	169, 160, 134, 146, 208, 167, 209, 147, 181, 180,
	182, 0, 458, 0, 242, 265, 280, 119, 474, 250,
	274, 275, 0, 212, 120, 140, 133, 207, 138, 452,
	450, 445, 444, 159, 166, 215, 278, 197, 221, 123,
	264, 240, 470, 473, 468, 469, 517, 518, 564, 565,
	566, 542, 464, 0, 471, 472, 0, 547, 554, 555,
	521, 101, 111, 163, 277, 213, 137, 266, 454, 467,
	129, 477, 0, 0, 490, 495, 496, 508, 510, 511,
	512, 513, 520, 527, 528, 530, 536, 537, 538, 539,
	544, 551, 570, 103, 104, 112, 118, 124, 128, 132,
	135, 142, 145, 148, 150, 151, 152, 157, 168, 172,
	173, 174, 175, 185, 186, 187, 189, 192, 193, 194,
	195, 196, 199, 201, 202, 203, 204, 205, 206, 214,
	217, 223, 224, 225, 226, 227, 228, 230, 233, 234,
	235, 236, 243, 247, 253, 254, 263, 270, 273, 0,
	0, 0, 0, 105, 156, 171, 229, 232, 238, 245,
	136, 153, 191, 0, 0, 952, 0, 343, 0, 0,
	0, 131, 0, 342, 0, 0, 0, 162, 0, 953,
	386, 164, 0, 0, 241, 179, 0, 0, 0, 0,
	0, 377, 378, 0, 0, 0, 0, 0, 0, 0,
	0, 63, 0, 0, 98, 99, 100, 364, 363, 366,
	367, 368, 369, 0, 0, 121, 365, 370, 371, 372,
	0, 0, 0, 0, 340, 357, 0, 385, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 354, 355, 429,
	0, 0, 0, 400, 0, 356, 0, 0, 349, 350,
	352, 351, 353, 358, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 399, 0, 0, 298, 0, 0,
	397, 0, 210, 0, 246, 144, 161, 117, 158, 102,
	113, 0, 143, 188, 218, 222, 0, 0, 0, 125,
	0, 220, 198, 262, 0, 200, 219, 165, 252, 211,
	261, 271, 272, 249, 269, 276, 237, 106, 248, 260,
	122, 231, 0, 0, 0, 108, 258, 244, 177, 154,
	155, 107, 0, 216, 130, 139, 127, 190, 255, 256,
	126, 279, 114, 268, 110, 115, 267, 184, 251, 259,
	178, 170, 109, 257, 176, 169, 160, 134, 146, 208,
	167, 209, 147, 181, 180, 182, 0, 0, 0, 242,
	265, 280, 119, 0, 250, 274, 275, 0, 212, 120,
	140, 133, 207, 138, 183, 116, 149, 239, 159, 166,
	215, 278, 197, 221, 123, 264, 240, 387, 398, 393,
	394, 391, 392, 390, 389, 388, 401, 379, 380, 381,
	382, 384, 0, 395, 396, 383, 101, 111, 163, 277,
	213, 137, 266, 0, 0, 129, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 103, 104,
	112, 118, 124, 128, 132, 135, 142, 145, 148, 150,
	151, 152, 157, 168, 172, 173, 174, 175, 185, 186,
	187, 189, 192, 193, 194, 195, 196, 199, 201, 202,
	203, 204, 205, 206, 214, 217, 223, 224, 225, 226,
	227, 228, 230, 233, 234, 235, 236, 243, 247, 253,
	254, 263, 270, 273, 0, 0, 0, 0, 105, 156,
	171, 229, 232, 238, 245, 136, 153, 191, 0, 0,
	0, 0, 343, 0, 0, 0, 131, 0, 342, 0,
	0, 0, 162, 0, 0, 386, 164, 0, 0, 241,
	179, 0, 0, 0, 0, 0, 377, 378, 0, 0,
	0, 0, 0, 0, 1061, 0, 63, 0, 0, 98,
	99, 100, 364, 363, 366, 367, 368, 369, 0, 0,
	121, 365, 370, 371, 372, 1062, 0, 0, 0, 340,
	357, 0, 385, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 354, 355, 0, 0, 0, 0, 400, 0,
	356, 0, 0, 349, 350, 352, 351, 353, 358, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 399,
	0, 0, 298, 0, 0, 397, 0, 210, 0, 246,
	144, 161, 117, 158, 102, 113, 0, 143, 188, 218,
	222, 0, 0, 0, 125, 0, 220, 198, 262, 0,
	200, 219, 165, 252, 211, 261, 271, 272, 249, 269,
	276, 237, 106, 248, 260, 122, 231, 0, 0, 0,
	108, 258, 244, 177, 154, 155, 107, 0, 216, 130,
	139, 127, 190, 255, 256, 126, 279, 114, 268, 110,
	115, 267, 184, 251, 259, 178, 170, 109, 257, 176,
	169, 160, 134, 146, 208, 167, 209, 147, 181, 180,
	182, 0, 0, 0, 242, 265, 280, 119, 0, 250,
	274, 275, 0, 212, 120, 140, 133, 207, 138, 183,
	116, 149, 239, 159, 166, 215, 278, 197, 221, 123,
	264, 240, 387, 398, 393, 394, 391, 392, 390, 389,
	388, 401, 379, 380, 381, 382, 384, 0, 395, 396,
	383, 101, 111, 163, 277, 213, 137, 266, 0, 0,
	129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 104, 112, 118, 124, 128, 132,
	135, 142, 145, 148, 150, 151, 152, 157, 168, 172,
	173, 174, 175, 185, 186, 187, 189, 192, 193, 194,
	195, 196, 199, 201, 202, 203, 204, 205, 206, 214,
	217, 223, 224, 225, 226, 227, 228, 230, 233, 234,
	235, 236, 243, 247, 253, 254, 263, 270, 273, 0,
	0, 0, 0, 105, 156, 171, 229, 232, 238, 245,
	136, 153, 191, 0, 0, 0, 0, 343, 0, 0,
	0, 131, 0, 342, 0, 0, 0, 162, 0, 0,
	386, 164, 0, 0, 241, 179, 0, 0, 0, 0,
	0, 377, 378, 0, 0, 0, 0, 0, 0, 0,
	0, 63, 0, 417, 98, 99, 100, 364, 363, 366,
	367, 368, 369, 0, 0, 121, 365, 370, 371, 372,
	0, 0, 0, 0, 340, 357, 0, 385, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 354, 355, 0,
	0, 0, 0, 400, 0, 356, 0, 0, 349, 350,
	352, 351, 353, 358, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 399, 0, 0, 298, 0, 0,
	397, 0, 210, 0, 246, 144, 161, 117, 158, 102,
	113, 0, 143, 188, 218, 222, 0, 0, 0, 125,
	0, 220, 198, 262, 0, 200, 219, 165, 252, 211,
	261, 271, 272, 249, 269, 276, 237, 106, 248, 260,
	122, 231, 0, 0, 0, 108, 258, 244, 177, 154,
	155, 107, 0, 216, 130, 139, 127, 190, 255, 256,
	126, 279, 114, 268, 110, 115, 267, 184, 251, 259,
	178, 170, 109, 257, 176, 169, 160, 134, 146, 208,
	167, 209, 147, 181, 180, 182, 0, 0, 0, 242,
	265, 280, 119, 0, 250, 274, 275, 0, 212, 120,
	140, 133, 207, 138, 183, 116, 149, 239, 159, 166,
	215, 278, 197, 221, 123, 264, 240, 387, 398, 393,
	394, 391, 392, 390, 389, 388, 401, 379, 380, 381,
	382, 384, 0, 395, 396, 383, 101, 111, 163, 277,
	213, 137, 266, 0, 0, 129, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 103, 104,
	112, 118, 124, 128, 132, 135, 142, 145, 148, 150,
	151, 152, 157, 168, 172, 173, 174, 175, 185, 186,
	187, 189, 192, 193, 194, 195, 196, 199, 201, 202,
	203, 204, 205, 206, 214, 217, 223, 224, 225, 226,
	227, 228, 230, 233, 234, 235, 236, 243, 247, 253,
	254, 263, 270, 273, 0, 0, 0, 0, 105, 156,
	171, 229, 232, 238, 245, 136, 153, 191, 0, 0,
	0, 0, 343, 0, 0, 0, 131, 0, 342, 0,
	0, 0, 162, 0, 0, 386, 164, 0, 0, 241,
	179, 0, 0, 0, 0, 0, 377, 378, 0, 0,
	0, 0, 0, 0, 0, 0, 63, 0, 0, 98,
	99, 100, 364, 363, 366, 367, 368, 369, 0, 0,
	121, 365, 370, 371, 372, 0, 0, 0, 0, 340,
	357, 0, 385, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 354, 355, 429, 0, 0, 0, 400, 0,
	356, 0, 0, 349, 350, 352, 351, 353, 358, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 399,
	0, 0, 298, 0, 0, 397, 0, 210, 0, 246,
	144, 161, 117, 158, 102, 113, 0, 143, 188, 218,
	222, 0, 0, 0, 125, 0, 220, 198, 262, 0,
	200, 219, 165, 252, 211, 261, 271, 272, 249, 269,
	276, 237, 106, 248, 260, 122, 231, 0, 0, 0,
	108, 258, 244, 177, 154, 155, 107, 0, 216, 130,
	139, 127, 190, 255, 256, 126, 279, 114, 268, 110,
	115, 267, 184, 251, 259, 178, 170, 109, 257, 176,
	169, 160, 134, 146, 208, 167, 209, 147, 181, 180,
	182, 0, 0, 0, 242, 265, 280, 119, 0, 250,
	274, 275, 0, 212, 120, 140, 133, 207, 138, 183,
	116, 149, 239, 159, 166, 215, 278, 197, 221, 123,
	264, 240, 387, 398, 393, 394, 391, 392, 390, 389,
	388, 401, 379, 380, 381, 382, 384, 0, 395, 396,
	383, 101, 111, 163, 277, 213, 137, 266, 0, 0,
	129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 104, 112, 118, 124, 128, 132,
	135, 142, 145, 148, 150, 151, 152, 157, 168, 172,
	173, 174, 175, 185, 186, 187, 189, 192, 193, 194,
	195, 196, 199, 201, 202, 203, 204, 205, 206, 214,
	217, 223, 224, 225, 226, 227, 228, 230, 233, 234,
	235, 236, 243, 247, 253, 254, 263, 270, 273, 0,
	0, 0, 0, 105, 156, 171, 229, 232, 238, 245,
	136, 153, 191, 0, 0, 0, 0, 343, 0, 0,
	0, 131, 0, 342, 0, 0, 0, 162, 0, 0,
	386, 164, 0, 0, 241, 179, 0, 0, 0, 0,
	0, 377, 378, 0, 0, 0, 0, 0, 0, 0,
	0, 63, 0, 0, 98, 99, 100, 364, 970, 366,
	367, 368, 369, 0, 0, 121, 365, 370, 371, 372,
	0, 0, 0, 0, 340, 357, 0, 385, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 354, 355, 429,
	0, 0, 0, 400, 0, 356, 0, 0, 349, 350,
	352, 351, 353, 358, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 399, 0, 0, 298, 0, 0,
	397, 0, 210, 0, 246, 144, 161, 117, 158, 102,
	113, 0, 143, 188, 218, 222, 0, 0, 0, 125,
	0, 220, 198, 262, 0, 200, 219, 165, 252, 211,
	261, 271, 272, 249, 269, 276, 237, 106, 248, 260,
	122, 231, 0, 0, 0, 108, 258, 244, 177, 154,
	155, 107, 0, 216, 130, 139, 127, 190, 255, 256,
	126, 279, 114, 268, 110, 115, 267, 184, 251, 259,
	178, 170, 109, 257, 176, 169, 160, 134, 146, 208,
	167, 209, 147, 181, 180, 182, 0, 0, 0, 242,
	265, 280, 119, 0, 250, 274, 275, 0, 212, 120,
	140, 133, 207, 138, 183, 116, 149, 239, 159, 166,
	215, 278, 197, 221, 123, 264, 240, 387, 398, 393,
	394, 391, 392, 390, 389, 388, 401, 379, 380, 381,
	382, 384, 0, 395, 396, 383, 101, 111, 163, 277,
	213, 137, 266, 0, 0, 129, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 103, 104,
	112, 118, 124, 128, 132, 135, 142, 145, 148, 150,
	151, 152, 157, 168, 172, 173, 174, 175, 185, 186,
	187, 189, 192, 193, 194, 195, 196, 199, 201, 202,
	203, 204, 205, 206, 214, 217, 223, 224, 225, 226,
	227, 228, 230, 233, 234, 235, 236, 243, 247, 253,
	254, 263, 270, 273, 0, 0, 0, 0, 105, 156,
	171, 229, 232, 238, 245, 136, 153, 191, 0, 0,
	0, 0, 343, 0, 0, 0, 131, 0, 342, 0,
	0, 0, 162, 0, 0, 386, 164, 0, 0, 241,
	179, 0, 0, 0, 0, 0, 377, 378, 0, 0,
	0, 0, 0, 0, 0, 0, 63, 0, 0, 98,
	99, 100, 364, 967, 366, 367, 368, 369, 0, 0,
	121, 365, 370, 371, 372, 0, 0, 0, 0, 340,
	357, 0, 385, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 354, 355, 429, 0, 0, 0, 400, 0,
	356, 0, 0, 349, 350, 352, 351, 353, 358, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 399,
	0, 0, 298, 0, 0, 397, 0, 210, 0, 246,
	144, 161, 117, 158, 102, 113, 0, 143, 188, 218,
	222, 0, 0, 0, 125, 0, 220, 198, 262, 0,
	200, 219, 165, 252, 211, 261, 271, 272, 249, 269,
	276, 237, 106, 248, 260, 122, 231, 0, 0, 0,
	108, 258, 244, 177, 154, 155, 107, 0, 216, 130,
	139, 127, 190, 255, 256, 126, 279, 114, 268, 110,
	115, 267, 184, 251, 259, 178, 170, 109, 257, 176,
	169, 160, 134, 146, 208, 167, 209, 147, 181, 180,
	182, 0, 0, 0, 242, 265, 280, 119, 0, 250,
	274, 275, 0, 212, 120, 140, 133, 207, 138, 183,
	116, 149, 239, 159, 166, 215, 278, 197, 221, 123,
	264, 240, 387, 398, 393, 394, 391, 392, 390, 389,
	388, 401, 379, 380, 381, 382, 384, 0, 395, 396,
	383, 101, 111, 163, 277, 213, 137, 266, 0, 0,
	129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 104, 112, 118, 124, 128, 132,
	135, 142, 145, 148, 150, 151, 152, 157, 168, 172,
	173, 174, 175, 185, 186, 187, 189, 192, 193, 194,
	195, 196, 199, 201, 202, 203, 204, 205, 206, 214,
	217, 223, 224, 225, 226, 227, 228, 230, 233, 234,
	235, 236, 243, 247, 253, 254, 263, 270, 273, 0,
	410, 0, 0, 105, 156, 171, 229, 232, 238, 245,
	136, 153, 191, 0, 0, 0, 0, 343, 0, 0,
	0, 131, 0, 342, 0, 0, 0, 162, 0, 0,
	386, 164, 0, 0, 241, 179, 0, 0, 0, 0,
	0, 377, 378, 0, 0, 0, 0, 0, 0, 0,
	0, 63, 0, 0, 98, 99, 100, 364, 363, 366,
	367, 368, 369, 0, 0, 121, 365, 370, 371, 372,
	0, 0, 0, 0, 340, 357, 0, 385, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 354, 355, 0,
	0, 0, 0, 400, 0, 356, 0, 0, 349, 350,
	352, 351, 353, 358, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 399, 0, 0, 298, 0, 0,
	397, 0, 210, 0, 246, 144, 161, 117, 158, 102,
	113, 0, 143, 188, 218, 222, 0, 0, 0, 125,
	0, 220, 198, 262, 0, 200, 219, 165, 252, 211,
	261, 271, 272, 249, 269, 276, 237, 106, 248, 260,
	122, 231, 0, 0, 0, 108, 258, 244, 177, 154,
	155, 107, 0, 216, 130, 139, 127, 190, 255, 256,
	126, 279, 114, 268, 110, 115, 267, 184, 251, 259,
	178, 170, 109, 257, 176, 169, 160, 134, 146, 208,
	167, 209, 147, 181, 180, 182, 0, 0, 0, 242,
	265, 280, 119, 0, 250, 274, 275, 0, 212, 120,
	140, 133, 207, 138, 183, 116, 149, 239, 159, 166,
	215, 278, 197, 221, 123, 264, 240, 387, 398, 393,
	394, 391, 392, 390, 389, 388, 401, 379, 380, 381,
	382, 384, 0, 395, 396, 383, 101, 111, 163, 277,
	213, 137, 266, 0, 0, 129, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 103, 104,
	112, 118, 124, 128, 132, 135, 142, 145, 148, 150,
	151, 152, 157, 168, 172, 173, 174, 175, 185, 186,
	187, 189, 192, 193, 194, 195, 196, 199, 201, 202,
	203, 204, 205, 206, 214, 217, 223, 224, 225, 226,
	227, 228, 230, 233, 234, 235, 236, 243, 247, 253,
	254, 263, 270, 273, 0, 0, 0, 0, 105, 156,
	171, 229, 232, 238, 245, 136, 153, 191, 0, 0,
	0, 0, 343, 0, 0, 0, 131, 0, 342, 0,
	0, 0, 162, 0, 0, 386, 164, 0, 0, 241,
	179, 0, 0, 0, 0, 0, 377, 378, 0, 0,
	0, 0, 0, 0, 0, 0, 63, 0, 0, 98,
	99, 100, 364, 363, 366, 367, 368, 369, 0, 0,
	121, 365, 370, 371, 372, 0, 0, 0, 0, 340,
	357, 0, 385, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 354, 355, 0, 0, 0, 0, 400, 0,
	356, 0, 0, 349, 350, 352, 351, 353, 358, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 399,
	0, 0, 298, 0, 0, 397, 0, 210, 0, 246,
	144, 161, 117, 158, 102, 113, 0, 143, 188, 218,
	222, 0, 0, 0, 125, 0, 220, 198, 262, 0,
	200, 219, 165, 252, 211, 261, 271, 272, 249, 269,
	276, 237, 106, 248, 260, 122, 231, 0, 0, 0,
	108, 258, 244, 177, 154, 155, 107, 0, 216, 130,
	139, 127, 190, 255, 256, 126, 279, 114, 268, 110,
	115, 267, 184, 251, 259, 178, 170, 109, 257, 176,
	169, 160, 134, 146, 208, 167, 209, 147, 181, 180,
	182, 0, 0, 0, 242, 265, 280, 119, 0, 250,
	274, 275, 0, 212, 120, 140, 133, 207, 138, 183,
	116, 149, 239, 159, 166, 215, 278, 197, 221, 123,
	264, 240, 387, 398, 393, 394, 391, 392, 390, 389,
	388, 401, 379, 380, 381, 382, 384, 0, 395, 396,
	383, 101, 111, 163, 277, 213, 137, 266, 0, 0,
	129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 104, 112, 118, 124, 128, 132,
	135, 142, 145, 148, 150, 151, 152, 157, 168, 172,
	173, 174, 175, 185, 186, 187, 189, 192, 193, 194,
	195, 196, 199, 201, 202, 203, 204, 205, 206, 214,
	217, 223, 224, 225, 226, 227, 228, 230, 233, 234,
	235, 236, 243, 247, 253, 254, 263, 270, 273, 0,
	0, 0, 0, 105, 156, 171, 229, 232, 238, 245,
	136, 153, 191, 0, 0, 0, 0, 0, 0, 0,
	0, 131, 0, 0, 0, 0, 0, 162, 0, 0,
	386, 164, 0, 0, 241, 179, 0, 0, 0, 0,
	0, 377, 378, 0, 0, 0, 0, 0, 0, 0,
	0, 63, 0, 0, 98, 99, 100, 364, 363, 366,
	367, 368, 369, 0, 0, 121, 365, 370, 371, 372,
	0, 0, 0, 0, 0, 357, 0, 385, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 354, 355, 0,
	0, 0, 0, 400, 0, 356, 0, 0, 349, 350,
	352, 351, 353, 358, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 399, 0, 0, 298, 0, 0,
	397, 0, 210, 0, 246, 144, 161, 117, 158, 102,
	113, 0, 143, 188, 218, 222, 0, 0, 0, 125,
	0, 220, 198, 262, 1657, 200, 219, 165, 252, 211,
	261, 271, 272, 249, 269, 276, 237, 106, 248, 260,
	122, 231, 0, 0, 0, 108, 258, 244, 177, 154,
	155, 107, 0, 216, 130, 139, 127, 190, 255, 256,
	126, 279, 114, 268, 110, 115, 267, 184, 251, 259,
	178, 170, 109, 257, 176, 169, 160, 134, 146, 208,
	167, 209, 147, 181, 180, 182, 0, 0, 0, 242,
	265, 280, 119, 0, 250, 274, 275, 0, 212, 120,
	140, 133, 207, 138, 183, 116, 149, 239, 159, 166,
	215, 278, 197, 221, 123, 264, 240, 387, 398, 393,
	394, 391, 392, 390, 389, 388, 401, 379, 380, 381,
	382, 384, 0, 395, 396, 383, 101, 111, 163, 277,
	213, 137, 266, 0, 0, 129, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 103, 104,
	112, 118, 124, 128, 132, 135, 142, 145, 148, 150,
	151, 152, 157, 168, 172, 173, 174, 175, 185, 186,
	187, 189, 192, 193, 194, 195, 196, 199, 201, 202,
	203, 204, 205, 206, 214, 217, 223, 224, 225, 226,
	227, 228, 230, 233, 234, 235, 236, 243, 247, 253,
	254, 263, 270, 273, 0, 0, 0, 0, 105, 156,
	171, 229, 232, 238, 245, 136, 153, 191, 0, 0,
	0, 0, 0, 0, 0, 0, 131, 0, 0, 0,
	0, 0, 162, 0, 0, 386, 164, 0, 0, 241,
	179, 0, 0, 0, 0, 0, 377, 378, 0, 0,
	0, 0, 0, 0, 0, 0, 63, 0, 417, 98,
	99, 100, 364, 363, 366, 367, 368, 369, 0, 0,
	121, 365, 370, 371, 372, 0, 0, 0, 0, 0,
	357, 0, 385, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 354, 355, 0, 0, 0, 0, 400, 0,
	356, 0, 0, 349, 350, 352, 351, 353, 358, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 399,
	0, 0, 298, 0, 0, 397, 0, 210, 0, 246,
	144, 161, 117, 158, 102, 113, 0, 143, 188, 218,
	222, 0, 0, 0, 125, 0, 220, 198, 262, 0,
	200, 219, 165, 252, 211, 261, 271, 272, 249, 269,
	276, 237, 106, 248, 260, 122, 231, 0, 0, 0,
	108, 258, 244, 177, 154, 155, 107, 0, 216, 130,
	139, 127, 190, 255, 256, 126, 279, 114, 268, 110,
	115, 267, 184, 251, 259, 178, 170, 109, 257, 176,
	169, 160, 134, 146, 208, 167, 209, 147, 181, 180,
	182, 0, 0, 0, 242, 265, 280, 119, 0, 250,
	274, 275, 0, 212, 120, 140, 133, 207, 138, 183,
	116, 149, 239, 159, 166, 215, 278, 197, 221, 123,
	264, 240, 387, 398, 393, 394, 391, 392, 390, 389,
	388, 401, 379, 380, 381, 382, 384, 0, 395, 396,
	383, 101, 111, 163, 277, 213, 137, 266, 0, 0,
	129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 104, 112, 118, 124, 128, 132,
	135, 142, 145, 148, 150, 151, 152, 157, 168, 172,
	173, 174, 175, 185, 186, 187, 189, 192, 193, 194,
	195, 196, 199, 201, 202, 203, 204, 205, 206, 214,
	217, 223, 224, 225, 226, 227, 228, 230, 233, 234,
	235, 236, 243, 247, 253, 254, 263, 270, 273, 0,
	0, 0, 0, 105, 156, 171, 229, 232, 238, 245,
	136, 153, 191, 0, 0, 0, 0, 0, 0, 0,
	0, 131, 0, 0, 0, 0, 0, 162, 0, 0,
	386, 164, 0, 0, 241, 179, 0, 0, 0, 0,
	0, 377, 378, 0, 0, 0, 0, 0, 0, 0,
	0, 63, 0, 0, 98, 99, 100, 364, 363, 366,
	367, 368, 369, 0, 0, 121, 365, 370, 371, 372,
	0, 0, 0, 0, 0, 357, 0, 385, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 354, 355, 0,
	0, 0, 0, 400, 0, 356, 0, 0, 349, 350,
	352, 351, 353, 358, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 399, 0, 0, 298, 0, 0,
	397, 0, 210, 0, 246, 144, 161, 117, 158, 102,
	113, 0, 143, 188, 218, 222, 0, 0, 0, 125,
	0, 220, 198, 262, 0, 200, 219, 165, 252, 211,
	261, 271, 272, 249, 269, 276, 237, 106, 248, 260,
	122, 231, 0, 0, 0, 108, 258, 244, 177, 154,
	155, 107, 0, 216, 130, 139, 127, 190, 255, 256,
	126, 279, 114, 268, 110, 115, 267, 184, 251, 259,
	178, 170, 109, 257, 176, 169, 160, 134, 146, 208,
	167, 209, 147, 181, 180, 182, 0, 0, 0, 242,
	265, 280, 119, 0, 250, 274, 275, 0, 212, 120,
	140, 133, 207, 138, 183, 116, 149, 239, 159, 166,
	215, 278, 197, 221, 123, 264, 240, 387, 398, 393,
	394, 391, 392, 390, 389, 388, 401, 379, 380, 381,
	382, 384, 0, 395, 396, 383, 101, 111, 163, 277,
	213, 137, 266, 0, 0, 129, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 103, 104,
	112, 118, 124, 128, 132, 135, 142, 145, 148, 150,
	151, 152, 157, 168, 172, 173, 174, 175, 185, 186,
	187, 189, 192, 193, 194, 195, 196, 199, 201, 202,
	203, 204, 205, 206, 214, 217, 223, 224, 225, 226,
	227, 228, 230, 233, 234, 235, 236, 243, 247, 253,
	254, 263, 270, 273, 0, 0, 0, 0, 105, 156,
	171, 229, 232, 238, 245, 136, 153, 191, 0, 0,
	0, 0, 0, 0, 0, 0, 131, 0, 0, 0,
	0, 0, 162, 0, 0, 0, 164, 0, 0, 241,
	179, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	99, 100, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 663, 662,
	672, 673, 665, 666, 667, 668, 669, 670, 671, 664,
	0, 0, 674, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	0, 0, 298, 0, 0, 0, 0, 210, 0, 246,
	144, 161, 117, 158, 102, 113, 0, 143, 188, 218,
	222, 0, 0, 0, 125, 0, 220, 198, 262, 0,
	200, 219, 165, 252, 211, 261, 271, 272, 249, 269,
	276, 237, 106, 248, 260, 122, 231, 0, 0, 0,
	108, 258, 244, 177, 154, 155, 107, 0, 216, 130,
	139, 127, 190, 255, 256, 126, 279, 114, 268, 110,
	115, 267, 184, 251, 259, 178, 170, 109, 257, 176,
	169, 160, 134, 146, 208, 167, 209, 147, 181, 180,
	182, 0, 0, 0, 242, 265, 280, 119, 0, 250,
	274, 275, 0, 212, 120, 140, 133, 207, 138, 183,
	116, 149, 239, 159, 166, 215, 278, 197, 221, 123,
	264, 240, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 111, 163, 277, 213, 137, 266, 0, 0,
	129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 104, 112, 118, 124, 128, 132,
	135, 142, 145, 148, 150, 151, 152, 157, 168, 172,
	173, 174, 175, 185, 186, 187, 189, 192, 193, 194,
	195, 196, 199, 201, 202, 203, 204, 205, 206, 214,
	217, 223, 224, 225, 226, 227, 228, 230, 233, 234,
	235, 236, 243, 247, 253, 254, 263, 270, 273, 0,
	0, 0, 0, 105, 156, 171, 229, 232, 238, 245,
	136, 153, 191, 0, 0, 0, 761, 0, 0, 0,
	0, 131, 0, 0, 0, 0, 0, 162, 0, 0,
	0, 164, 0, 0, 241, 179, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 99, 100, 0, 763, 0,
	0, 0, 0, 0, 0, 121, 0, 0, 0, 0,
	0, 652, 653, 651, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 654,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 0, 0, 298, 0, 0,
	0, 0, 210, 0, 246, 144, 161, 117, 158, 102,
	113, 0, 143, 188, 218, 222, 0, 0, 0, 125,
	0, 220, 198, 262, 0, 200, 219, 165, 252, 211,
	261, 271, 272, 249, 269, 276, 237, 106, 248, 260,
	122, 231, 0, 0, 0, 108, 258, 244, 177, 154,
	155, 107, 0, 216, 130, 139, 127, 190, 255, 256,
	126, 279, 114, 268, 110, 115, 267, 184, 251, 259,
	178, 170, 109, 257, 176, 169, 160, 134, 146, 208,
	167, 209, 147, 181, 180, 182, 0, 0, 0, 242,
	265, 280, 119, 0, 250, 274, 275, 0, 212, 120,
	140, 133, 207, 138, 183, 116, 149, 239, 159, 166,
	215, 278, 197, 221, 123, 264, 240, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 111, 163, 277,
	213, 137, 266, 0, 0, 129, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 103, 104,
	112, 118, 124, 128, 132, 135, 142, 145, 148, 150,
	151, 152, 157, 168, 172, 173, 174, 175, 185, 186,
	187, 189, 192, 193, 194, 195, 196, 199, 201, 202,
	203, 204, 205, 206, 214, 217, 223, 224, 225, 226,
	227, 228, 230, 233, 234, 235, 236, 243, 247, 253,
	254, 263, 270, 273, 0, 0, 0, 0, 105, 156,
	171, 229, 232, 238, 245, 136, 153, 191, 0, 0,
	0, 0, 0, 0, 0, 0, 131, 0, 0, 0,
	0, 0, 162, 0, 0, 0, 164, 0, 0, 241,
	179, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	99, 100, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 0, 0, 0, 0, 90, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 92,
	93, 0, 89, 0, 0, 0, 94, 210, 0, 246,
	144, 161, 117, 158, 102, 113, 0, 143, 188, 218,
	222, 0, 0, 0, 125, 0, 220, 198, 262, 0,
	200, 219, 165, 252, 211, 261, 271, 272, 249, 269,
	276, 237, 106, 248, 260, 122, 231, 0, 0, 0,
	108, 258, 244, 177, 154, 155, 107, 0, 216, 130,
	139, 127, 190, 255, 256, 126, 279, 114, 268, 110,
	115, 267, 184, 251, 259, 178, 170, 109, 257, 176,
	169, 160, 134, 146, 208, 167, 209, 147, 181, 180,
	182, 0, 0, 0, 242, 265, 280, 119, 0, 250,
	274, 275, 0, 212, 120, 140, 133, 207, 138, 183,
	116, 149, 239, 159, 166, 215, 278, 197, 221, 123,
	264, 240, 0, 91, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 111, 163, 277, 213, 137, 266, 0, 0,
	129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 104, 112, 118, 124, 128, 132,
	135, 142, 145, 148, 150, 151, 152, 157, 168, 172,
	173, 174, 175, 185, 186, 187, 189, 192, 193, 194,
	195, 196, 199, 201, 202, 203, 204, 205, 206, 214,
	217, 223, 224, 225, 226, 227, 228, 230, 233, 234,
	235, 236, 243, 247, 253, 254, 263, 270, 273, 0,
	0, 0, 0, 105, 156, 171, 229, 232, 238, 245,
	136, 153, 191, 0, 0, 0, 1044, 0, 0, 0,
	0, 131, 0, 0, 0, 0, 0, 162, 0, 0,
	0, 164, 0, 0, 241, 179, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 99, 100, 0, 1046, 0,
	0, 0, 0, 0, 0, 121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 0, 0, 298, 0, 0,
	0, 0, 210, 0, 246, 144, 161, 117, 158, 102,
	113, 0, 143, 188, 218, 222, 0, 0, 0, 125,
	0, 220, 198, 262, 0, 200, 219, 165, 252, 211,
	261, 271, 272, 249, 269, 276, 237, 106, 248, 260,
	122, 231, 0, 0, 0, 108, 258, 244, 177, 154,
	155, 107, 0, 216, 130, 139, 127, 190, 255, 256,
	126, 279, 114, 268, 110, 115, 267, 184, 251, 259,
	178, 170, 109, 257, 176, 169, 160, 134, 146, 208,
	167, 209, 147, 181, 180, 182, 0, 0, 0, 242,
	265, 280, 119, 0, 250, 274, 275, 0, 212, 120,
	140, 133, 207, 138, 183, 116, 149, 239, 159, 166,
	215, 278, 197, 221, 123, 264, 240, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 111, 163, 277,
	213, 137, 266, 0, 0, 129, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 103, 104,
	112, 118, 124, 128, 132, 135, 142, 145, 148, 150,
	151, 152, 157, 168, 172, 173, 174, 175, 185, 186,
	187, 189, 192, 193, 194, 195, 196, 199, 201, 202,
	203, 204, 205, 206, 214, 217, 223, 224, 225, 226,
	227, 228, 230, 233, 234, 235, 236, 243, 247, 253,
	254, 263, 270, 273, 0, 32, 0, 0, 105, 156,
	171, 229, 232, 238, 245, 136, 153, 191, 0, 0,
	0, 0, 0, 0, 0, 0, 131, 0, 0, 0,
	0, 0, 162, 0, 0, 0, 164, 0, 0, 241,
	179, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 63, 0, 0, 98,
	99, 100, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	0, 0, 298, 0, 0, 0, 0, 210, 0, 246,
	144, 161, 117, 158, 102, 113, 0, 143, 188, 218,
	222, 0, 0, 0, 125, 0, 220, 198, 262, 0,
	200, 219, 165, 252, 211, 261, 271, 272, 249, 269,
	276, 237, 106, 248, 260, 122, 231, 0, 0, 0,
	108, 258, 244, 177, 154, 155, 107, 0, 216, 130,
	139, 127, 190, 255, 256, 126, 279, 114, 268, 110,
	115, 267, 184, 251, 259, 178, 170, 109, 257, 176,
	169, 160, 134, 146, 208, 167, 209, 147, 181, 180,
	182, 0, 0, 0, 242, 265, 280, 119, 0, 250,
	274, 275, 0, 212, 120, 140, 133, 207, 138, 183,
	116, 149, 239, 159, 166, 215, 278, 197, 221, 123,
	264, 240, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 111, 163, 277, 213, 137, 266, 0, 0,
	129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 104, 112, 118, 124, 128, 132,
	135, 142, 145, 148, 150, 151, 152, 157, 168, 172,
	173, 174, 175, 185, 186, 187, 189, 192, 193, 194,
	195, 196, 199, 201, 202, 203, 204, 205, 206, 214,
	217, 223, 224, 225, 226, 227, 228, 230, 233, 234,
	235, 236, 243, 247, 253, 254, 263, 270, 273, 0,
	0, 0, 0, 105, 156, 171, 229, 232, 238, 245,
	136, 153, 191, 0, 0, 0, 1044, 0, 0, 0,
	0, 131, 0, 0, 0, 0, 0, 162, 0, 0,
	0, 164, 0, 0, 241, 179, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 99, 100, 0, 1046, 0,
	0, 0, 0, 0, 0, 121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 0, 0, 298, 0, 0,
	0, 0, 210, 0, 246, 144, 161, 117, 158, 102,
	113, 0, 143, 188, 218, 222, 0, 0, 0, 125,
	0, 220, 198, 262, 0, 1042, 219, 165, 252, 211,
	261, 271, 272, 249, 269, 276, 237, 106, 248, 260,
	122, 231, 0, 0, 0, 108, 258, 244, 177, 154,
	155, 107, 0, 216, 130, 139, 127, 190, 255, 256,
	126, 279, 114, 268, 110, 115, 267, 184, 251, 259,
	178, 170, 109, 257, 176, 169, 160, 134, 146, 208,
	167, 209, 147, 181, 180, 182, 0, 0, 0, 242,
	265, 280, 119, 0, 250, 274, 275, 0, 212, 120,
	140, 133, 207, 138, 183, 116, 149, 239, 159, 166,
	215, 278, 197, 221, 123, 264, 240, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 111, 163, 277,
	213, 137, 266, 0, 0, 129, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 103, 104,
	112, 118, 124, 128, 132, 135, 142, 145, 148, 150,
	151, 152, 157, 168, 172, 173, 174, 175, 185, 186,
	187, 189, 192, 193, 194, 195, 196, 199, 201, 202,
	203, 204, 205, 206, 214, 217, 223, 224, 225, 226,
	227, 228, 230, 233, 234, 235, 236, 243, 247, 253,
	254, 263, 270, 273, 0, 0, 0, 0, 105, 156,
	171, 229, 232, 238, 245, 136, 153, 191, 0, 0,
	0, 0, 0, 0, 0, 0, 131, 0, 0, 0,
	0, 0, 162, 0, 0, 0, 164, 0, 0, 241,
	179, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	99, 100, 0, 0, 1010, 0, 0, 1011, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	0, 0, 298, 0, 0, 0, 0, 210, 0, 246,
	144, 161, 117, 158, 102, 113, 0, 143, 188, 218,
	222, 0, 0, 0, 125, 0, 220, 198, 262, 0,
	200, 219, 165, 252, 211, 261, 271, 272, 249, 269,
	276, 237, 106, 248, 260, 122, 231, 0, 0, 0,
	108, 258, 244, 177, 154, 155, 107, 0, 216, 130,
	139, 127, 190, 255, 256, 126, 279, 114, 268, 110,
	115, 267, 184, 251, 259, 178, 170, 109, 257, 176,
	169, 160, 134, 146, 208, 167, 209, 147, 181, 180,
	182, 0, 0, 0, 242, 265, 280, 119, 0, 250,
	274, 275, 0, 212, 120, 140, 133, 207, 138, 183,
	116, 149, 239, 159, 166, 215, 278, 197, 221, 123,
	264, 240, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 111, 163, 277, 213, 137, 266, 0, 0,
	129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 104, 112, 118, 124, 128, 132,
	135, 142, 145, 148, 150, 151, 152, 157, 168, 172,
	173, 174, 175, 185, 186, 187, 189, 192, 193, 194,
	195, 196, 199, 201, 202, 203, 204, 205, 206, 214,
	217, 223, 224, 225, 226, 227, 228, 230, 233, 234,
	235, 236, 243, 247, 253, 254, 263, 270, 273, 0,
	0, 0, 0, 105, 156, 171, 229, 232, 238, 245,
	136, 153, 191, 0, 0, 0, 0, 0, 0, 0,
	0, 131, 0, 796, 0, 0, 0, 162, 0, 0,
	0, 164, 0, 0, 241, 179, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 99, 100, 0, 795, 0,
	0, 0, 0, 0, 0, 121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 0, 0, 298, 0, 0,
	0, 0, 210, 0, 246, 144, 161, 117, 158, 102,
	113, 0, 143, 188, 218, 222, 0, 0, 0, 125,
	0, 220, 198, 262, 0, 200, 219, 165, 252, 211,
	261, 271, 272, 249, 269, 276, 237, 106, 248, 260,
	122, 231, 0, 0, 0, 108, 258, 244, 177, 154,
	155, 107, 0, 216, 130, 139, 127, 190, 255, 256,
	126, 279, 114, 268, 110, 115, 267, 184, 251, 259,
	178, 170, 109, 257, 176, 169, 160, 134, 146, 208,
	167, 209, 147, 181, 180, 182, 0, 0, 0, 242,
	265, 280, 119, 0, 250, 274, 275, 0, 212, 120,
	140, 133, 207, 138, 183, 116, 149, 239, 159, 166,
	215, 278, 197, 221, 123, 264, 240, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 111, 163, 277,
	213, 137, 266, 0, 0, 129, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 103, 104,
	112, 118, 124, 128, 132, 135, 142, 145, 148, 150,
	151, 152, 157, 168, 172, 173, 174, 175, 185, 186,
	187, 189, 192, 193, 194, 195, 196, 199, 201, 202,
	203, 204, 205, 206, 214, 217, 223, 224, 225, 226,
	227, 228, 230, 233, 234, 235, 236, 243, 247, 253,
	254, 263, 270, 273, 0, 0, 0, 0, 105, 156,
	171, 229, 232, 238, 245, 136, 153, 191, 0, 0,
	0, 0, 0, 0, 0, 0, 131, 0, 0, 0,
	0, 0, 162, 0, 0, 0, 164, 0, 0, 241,
	179, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 417, 98,
	99, 100, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	0, 0, 298, 0, 0, 0, 0, 210, 0, 246,
	144, 161, 117, 158, 102, 113, 0, 143, 188, 218,
	222, 0, 0, 0, 125, 0, 220, 198, 262, 0,
	200, 219, 165, 252, 211, 261, 271, 272, 249, 269,
	276, 237, 106, 248, 260, 122, 231, 0, 0, 0,
	108, 258, 244, 177, 154, 155, 107, 0, 216, 130,
	139, 127, 190, 255, 256, 126, 279, 114, 268, 110,
	115, 267, 184, 251, 259, 178, 170, 109, 257, 176,
	169, 160, 134, 146, 208, 167, 209, 147, 181, 180,
	182, 0, 0, 0, 242, 265, 280, 119, 0, 250,
	274, 275, 0, 212, 120, 140, 133, 207, 138, 183,
	116, 149, 239, 159, 166, 215, 278, 197, 221, 123,
	264, 240, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 111, 163, 277, 213, 137, 266, 0, 0,
	129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 104, 112, 118, 124, 128, 132,
	135, 142, 145, 148, 150, 151, 152, 157, 168, 172,
	173, 174, 175, 185, 186, 187, 189, 192, 193, 194,
	195, 196, 199, 201, 202, 203, 204, 205, 206, 214,
	217, 223, 224, 225, 226, 227, 228, 230, 233, 234,
	235, 236, 243, 247, 253, 254, 263, 270, 273, 0,
	0, 0, 0, 105, 156, 171, 229, 232, 238, 245,
	136, 153, 191, 0, 0, 0, 0, 0, 0, 0,
	0, 131, 0, 0, 0, 0, 0, 162, 0, 0,
	0, 164, 0, 0, 241, 179, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 63, 0, 0, 98, 99, 100, 0, 0, 0,
	0, 0, 0, 0, 0, 121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 0, 0, 298, 0, 0,
	0, 0, 210, 0, 246, 144, 161, 117, 158, 102,
	113, 0, 143, 188, 218, 222, 0, 0, 0, 125,
	0, 220, 198, 262, 0, 200, 219, 165, 252, 211,
	261, 271, 272, 249, 269, 276, 237, 106, 248, 260,
	122, 231, 0, 0, 0, 108, 258, 244, 177, 154,
	155, 107, 0, 216, 130, 139, 127, 190, 255, 256,
	126, 279, 114, 268, 110, 115, 267, 184, 251, 259,
	178, 170, 109, 257, 176, 169, 160, 134, 146, 208,
	167, 209, 147, 181, 180, 182, 0, 0, 0, 242,
	265, 280, 119, 0, 250, 274, 275, 0, 212, 120,
	140, 133, 207, 138, 183, 116, 149, 239, 159, 166,
	215, 278, 197, 221, 123, 264, 240, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 111, 163, 277,
	213, 137, 266, 0, 0, 129, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 103, 104,
	112, 118, 124, 128, 132, 135, 142, 145, 148, 150,
	151, 152, 157, 168, 172, 173, 174, 175, 185, 186,
	187, 189, 192, 193, 194, 195, 196, 199, 201, 202,
	203, 204, 205, 206, 214, 217, 223, 224, 225, 226,
	227, 228, 230, 233, 234, 235, 236, 243, 247, 253,
	254, 263, 270, 273, 0, 0, 0, 0, 105, 156,
	171, 229, 232, 238, 245, 136, 153, 191, 0, 0,
	0, 0, 0, 0, 0, 0, 131, 0, 0, 0,
	0, 0, 162, 0, 0, 0, 164, 0, 0, 241,
	179, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	99, 100, 0, 1046, 0, 0, 0, 0, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	0, 0, 298, 0, 0, 0, 0, 210, 0, 246,
	144, 161, 117, 158, 102, 113, 0, 143, 188, 218,
	222, 0, 0, 0, 125, 0, 220, 198, 262, 0,
	200, 219, 165, 252, 211, 261, 271, 272, 249, 269,
	276, 237, 106, 248, 260, 122, 231, 0, 0, 0,
	108, 258, 244, 177, 154, 155, 107, 0, 216, 130,
	139, 127, 190, 255, 256, 126, 279, 114, 268, 110,
	115, 267, 184, 251, 259, 178, 170, 109, 257, 176,
	169, 160, 134, 146, 208, 167, 209, 147, 181, 180,
	182, 0, 0, 0, 242, 265, 280, 119, 0, 250,
	274, 275, 0, 212, 120, 140, 133, 207, 138, 183,
	116, 149, 239, 159, 166, 215, 278, 197, 221, 123,
	264, 240, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 111, 163, 277, 213, 137, 266, 0, 0,
	129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 104, 112, 118, 124, 128, 132,
	135, 142, 145, 148, 150, 151, 152, 157, 168, 172,
	173, 174, 175, 185, 186, 187, 189, 192, 193, 194,
	195, 196, 199, 201, 202, 203, 204, 205, 206, 214,
	217, 223, 224, 225, 226, 227, 228, 230, 233, 234,
	235, 236, 243, 247, 253, 254, 263, 270, 273, 0,
	0, 0, 0, 105, 156, 171, 229, 232, 238, 245,
	136, 153, 191, 0, 0, 0, 0, 0, 0, 0,
	0, 131, 0, 0, 0, 0, 0, 162, 0, 0,
	0, 164, 0, 0, 241, 179, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 99, 100, 0, 1161, 0,
	0, 0, 0, 0, 0, 121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 0, 0, 298, 0, 0,
	0, 0, 210, 0, 246, 144, 161, 117, 158, 102,
	113, 0, 143, 188, 218, 222, 0, 0, 0, 125,
	0, 220, 198, 262, 0, 200, 219, 165, 252, 211,
	261, 271, 272, 249, 269, 276, 237, 106, 248, 260,
	122, 231, 0, 0, 0, 108, 258, 244, 177, 154,
	155, 107, 0, 216, 130, 139, 127, 190, 255, 256,
	126, 279, 114, 268, 110, 115, 267, 184, 251, 259,
	178, 170, 109, 257, 176, 169, 160, 134, 146, 208,
	167, 209, 147, 181, 180, 182, 0, 0, 0, 242,
	265, 280, 119, 0, 250, 274, 275, 0, 212, 120,
	140, 133, 207, 138, 183, 116, 149, 239, 159, 166,
	215, 278, 197, 221, 123, 264, 240, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 111, 163, 277,
	213, 137, 266, 0, 0, 129, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 103, 104,
	112, 118, 124, 128, 132, 135, 142, 145, 148, 150,
	151, 152, 157, 168, 172, 173, 174, 175, 185, 186,
	187, 189, 192, 193, 194, 195, 196, 199, 201, 202,
	203, 204, 205, 206, 214, 217, 223, 224, 225, 226,
	227, 228, 230, 233, 234, 235, 236, 243, 247, 253,
	254, 263, 270, 273, 0, 0, 0, 0, 105, 156,
	171, 229, 232, 238, 245, 136, 153, 191, 0, 0,
	0, 0, 0, 0, 0, 0, 131, 0, 0, 0,
	0, 0, 162, 0, 0, 0, 164, 0, 0, 241,
	179, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	99, 100, 0, 763, 0, 0, 0, 0, 0, 0,
	121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	0, 0, 298, 0, 0, 0, 0, 210, 0, 246,
	144, 161, 117, 158, 102, 113, 0, 143, 188, 218,
	222, 0, 0, 0, 125, 0, 220, 198, 262, 0,
	200, 219, 165, 252, 211, 261, 271, 272, 249, 269,
	276, 237, 106, 248, 260, 122, 231, 0, 0, 0,
	108, 258, 244, 177, 154, 155, 107, 0, 216, 130,
	139, 127, 190, 255, 256, 126, 279, 114, 268, 110,
	115, 267, 184, 251, 259, 178, 170, 109, 257, 176,
	169, 160, 134, 146, 208, 167, 209, 147, 181, 180,
	182, 0, 0, 0, 242, 265, 280, 119, 0, 250,
	274, 275, 0, 212, 120, 140, 133, 207, 138, 183,
	116, 149, 239, 159, 166, 215, 278, 197, 221, 123,
	264, 240, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 111, 163, 277, 213, 137, 266, 0, 0,
	129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 104, 112, 118, 124, 128, 132,
	135, 142, 145, 148, 150, 151, 152, 157, 168, 172,
	173, 174, 175, 185, 186, 187, 189, 192, 193, 194,
	195, 196, 199, 201, 202, 203, 204, 205, 206, 214,
	217, 223, 224, 225, 226, 227, 228, 230, 233, 234,
	235, 236, 243, 247, 253, 254, 263, 270, 273, 0,
	0, 0, 0, 105, 156, 171, 229, 232, 238, 245,
	136, 153, 191, 0, 0, 0, 0, 0, 0, 0,
	766, 131, 0, 0, 0, 0, 0, 162, 0, 0,
	0, 164, 0, 0, 241, 179, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 99, 100, 0, 0, 0,
	0, 0, 0, 0, 0, 121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 0, 0, 298, 0, 0,
	0, 0, 210, 0, 246, 144, 161, 117, 158, 102,
	113, 0, 143, 188, 218, 222, 0, 0, 0, 125,
	0, 220, 198, 262, 0, 200, 219, 165, 252, 211,
	261, 271, 272, 249, 269, 276, 237, 106, 248, 260,
	122, 231, 0, 0, 0, 108, 258, 244, 177, 154,
	155, 107, 0, 216, 130, 139, 127, 190, 255, 256,
	126, 279, 114, 268, 110, 115, 267, 184, 251, 259,
	178, 170, 109, 257, 176, 169, 160, 134, 146, 208,
	167, 209, 147, 181, 180, 182, 0, 0, 0, 242,
	265, 280, 119, 0, 250, 274, 275, 0, 212, 120,
	140, 133, 207, 138, 183, 116, 149, 239, 159, 166,
	215, 278, 197, 221, 123, 264, 240, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 111, 163, 277,
	213, 137, 266, 0, 0, 129, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 103, 104,
	112, 118, 124, 128, 132, 135, 142, 145, 148, 150,
	151, 152, 157, 168, 172, 173, 174, 175, 185, 186,
	187, 189, 192, 193, 194, 195, 196, 199, 201, 202,
	203, 204, 205, 206, 214, 217, 223, 224, 225, 226,
	227, 228, 230, 233, 234, 235, 236, 243, 247, 253,
	254, 263, 270, 273, 0, 0, 0, 0, 105, 156,
	171, 229, 232, 238, 245, 136, 153, 434, 0, 0,
	0, 0, 0, 0, 191, 0, 0, 0, 0, 0,
	0, 0, 0, 131, 0, 0, 0, 0, 0, 162,
	0, 0, 0, 164, 0, 0, 241, 179, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 98, 99, 100, 0,
	0, 0, 0, 0, 0, 0, 0, 121, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 0, 0, 0, 298,
	0, 0, 0, 0, 210, 0, 246, 144, 161, 117,
	158, 102, 113, 0, 143, 188, 218, 222, 0, 0,
	0, 125, 0, 220, 198, 262, 0, 200, 219, 165,
	252, 211, 261, 271, 272, 249, 269, 276, 237, 106,
	248, 260, 122, 231, 0, 0, 0, 108, 258, 244,
	177, 154, 155, 107, 0, 216, 130, 139, 127, 190,
	255, 256, 126, 279, 114, 268, 110, 115, 267, 184,
	251, 259, 178, 170, 109, 257, 176, 169, 160, 134,
	146, 208, 167, 209, 147, 181, 180, 182, 0, 0,
	0, 242, 265, 280, 119, 0, 250, 274, 275, 0,
	212, 120, 140, 133, 207, 138, 183, 116, 149, 239,
	159, 166, 215, 278, 197, 221, 123, 264, 240, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 111,
	163, 277, 213, 137, 266, 0, 0, 129, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	103, 104, 112, 118, 124, 128, 132, 135, 142, 145,
	148, 150, 151, 152, 157, 168, 172, 173, 174, 175,
	185, 186, 187, 189, 192, 193, 194, 195, 196, 199,
	201, 202, 203, 204, 205, 206, 214, 217, 223, 224,
	225, 226, 227, 228, 230, 233, 234, 235, 236, 243,
	247, 253, 254, 263, 270, 273, 0, 0, 0, 0,
	105, 156, 171, 229, 232, 238, 245, 136, 153, 191,
	0, 0, 0, 0, 0, 0, 0, 0, 131, 0,
	0, 0, 0, 0, 162, 0, 0, 0, 164, 0,
	0, 241, 179, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 99, 100, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 0, 293, 0, 298, 0, 0, 0, 0, 210,
	0, 246, 144, 161, 117, 158, 102, 113, 0, 143,
	188, 218, 222, 0, 0, 0, 125, 0, 220, 198,
	262, 0, 200, 219, 165, 252, 211, 261, 271, 272,
	249, 269, 276, 237, 106, 248, 260, 122, 231, 0,
	0, 0, 108, 258, 244, 177, 154, 155, 107, 0,
	216, 130, 139, 127, 190, 255, 256, 126, 279, 114,
	268, 110, 115, 267, 184, 251, 259, 178, 170, 109,
	257, 176, 169, 160, 134, 146, 208, 167, 209, 147,
	181, 180, 182, 0, 0, 0, 242, 265, 280, 119,
	0, 250, 274, 275, 0, 212, 120, 140, 133, 207,
	138, 183, 116, 149, 239, 159, 166, 215, 278, 197,
	221, 123, 264, 240, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 111, 163, 277, 213, 137, 266,
	0, 0, 129, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 103, 104, 112, 118, 124,
	128, 132, 135, 142, 145, 148, 150, 151, 152, 157,
	168, 172, 173, 174, 175, 185, 186, 187, 189, 192,
	193, 194, 195, 196, 199, 201, 202, 203, 204, 205,
	206, 214, 217, 223, 224, 225, 226, 227, 228, 230,
	233, 234, 235, 236, 243, 247, 253, 254, 263, 270,
	273, 0, 0, 0, 0, 105, 156, 171, 229, 232,
	238, 245, 136, 153, 191, 0, 0, 0, 0, 0,
	0, 0, 0, 131, 0, 0, 0, 0, 0, 162,
	0, 0, 0, 164, 0, 0, 241, 179, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 98, 99, 100, 0,
	0, 0, 0, 0, 0, 0, 0, 121, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 0, 0, 0, 298,
	0, 0, 0, 0, 210, 0, 246, 144, 161, 117,
	158, 102, 113, 0, 143, 188, 218, 222, 0, 0,
	0, 125, 0, 220, 198, 262, 0, 200, 219, 165,
	252, 211, 261, 271, 272, 249, 269, 276, 237, 106,
	248, 260, 122, 231, 0, 0, 0, 108, 258, 244,
	177, 154, 155, 107, 0, 216, 130, 139, 127, 190,
	255, 256, 126, 279, 114, 268, 110, 115, 267, 184,
	251, 259, 178, 170, 109, 257, 176, 169, 160, 134,
	146, 208, 167, 209, 147, 181, 180, 182, 0, 0,
	0, 242, 265, 280, 119, 0, 250, 274, 275, 0,
	212, 120, 140, 133, 207, 138, 183, 116, 149, 239,
	159, 166, 215, 278, 197, 221, 123, 264, 240, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 111,
	163, 277, 213, 137, 266, 0, 0, 129, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	103, 104, 112, 118, 124, 128, 132, 135, 142, 145,
	148, 150, 151, 152, 157, 168, 172, 173, 174, 175,
	185, 186, 187, 189, 192, 193, 194, 195, 196, 199,
	201, 202, 203, 204, 205, 206, 214, 217, 223, 224,
	225, 226, 227, 228, 230, 233, 234, 235, 236, 243,
	247, 253, 254, 263, 270, 273, 0, 0, 0, 0,
	105, 156, 171, 229, 232, 238, 245, 136, 153,
}
var yyPact = [...]int{

	1622, -1000, -287, 1041, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	997, 840, -1000, -1000, -1000, -1000, -1000, -1000, 308, 12659,
	4, 142, 27, 17281, 141, 92, 17636, -1000, 36, -1000,
	24, 17636, 32, -24, -1000, -1000, -38, -77, -1000, 10529,
	-265, -1000, 485, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 827, 981, 987, 990, 671, 1121, -1000, 9109,
	104, 104, 16926, 7689, -1000, -1000, 673, 17636, 138, 17636,
	-127, 102, 102, 102, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 137, 17636, 588, 588, 263, -1000, 17636, 99, 588,
	99, 99, 99, 17636, -1000, 186, -1000, -1000, -1000, 17636,
	588, 950, 366, 101, 5113, -1000, 253, -1000, 5113, 43,
	5113, -45, 1006, 44, -4, -1000, 588, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 115, -1000, -1000, 17636, -90, 146,
	357, -1000, -1000, -1000, -1000, -1000, -1000, 698, 429, -1000,
	10529, 1768, 788, 788, -1000, -1000, 154, -1000, -1000, 11594,
	11594, 11594, 11594, 11594, 11594, 11594, 11594, 11594, 11594, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 788, 183, -1000, 10174, 788, 788, 788,
	788, 788, 788, 788, 788, 10529, 788, 788, 788, 788,
	788, 788, 788, 788, 788, 788, 788, 788, 788, 788,
	788, 788, -1000, -1000, -269, 17636, -1000, 997, -1000, 840,
	-1000, -1000, -1000, 958, 10529, 10529, 997, -1000, 917, 9109,
	-1000, -1000, 1097, -1000, -1000, -1000, -1000, 407, 1024, -1000,
	12304, 182, 16564, 15144, 17636, 818, 740, -1000, -1000, 179,
	779, 7321, -58, -1000, -1000, -1000, 355, 14434, -1000, -1000,
	-1000, 949, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 766, 17636, -1000, 349, -1000, 588, 5113, 117,
	588, 320, 588, 17636, 17636, 5113, 5113, 5113, 54, 88,
	74, 17636, 776, 113, 17636, 976, 861, 17636, 588, 588,
	-1000, 6585, -1000, 5113, 366, -1000, 533, 10529, 5113, 5113,
	5113, 17636, 5113, 5113, -1000, -1000, -1000, 330, 427, -1000,
	-1000, -1000, -1000, 5113, 5113, -1000, 1023, 315, -1000, -1000,
	-1000, -1000, 10529, 231, -1000, 859, -1000, -1000, 16564, 30,
	-1000, 17636, -1000, 1041, -1000, -1000, -1000, -119, -1000, -1000,
	10529, 10529, 10529, 10529, 438, 249, 11594, 425, 383, 11594,
	11594, 11594, 11594, 11594, 11594, 11594, 11594, 11594, 11594, 11594,
	11594, 11594, 11594, 11594, 686, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 588, -1000, 1038, 748, 748, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 11949, 8044, 6585,
	671, 743, 997, 9109, 9109, 10529, 10529, 9819, 9464, 9109,
	941, 363, 429, 17636, -1000, -1000, 11239, -1000, -1000, -1000,
	-1000, -1000, 544, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	17636, 17636, 9109, 9109, 9109, 9109, 9109, 588, 588, 540,
	987, 671, 1097, -1000, 1033, 234, 601, 774, -1000, 552,
	987, 14079, 660, -1000, 1097, -1000, -1000, -1000, 17636, -1000,
	-1000, 16209, -1000, -1000, 6217, 67, 17636, -1000, 710, 888,
	-1000, -1000, -1000, 978, 13369, 13724, 67, 665, 15144, 17636,
	-1000, -1000, 15144, 17636, 5849, 6953, -58, -1000, 745, -1000,
	-105, -81, 8399, 195, -1000, -1000, -1000, -1000, 4745, 545,
	573, 419, -32, -1000, -1000, -1000, 824, -1000, 824, 824,
	824, 824, -2, -2, -2, -2, -1000, -1000, -1000, -1000,
	-1000, 843, 838, -1000, 824, 824, 824, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 837, 837, 837, 829, 829,
	848, -1000, 17636, 5113, 963, 5113, -1000, 136, -1000, -1000,
	-1000, 17636, 17636, 17636, 17636, 17636, 149, 17636, 17636, 768,
	-1000, 17636, 5113, -1000, -1000, 176, -1000, -1000, -1000, -1000,
	-1000, 429, -1000, -1000, -1000, -1000, -1000, -1000, 17636, -1000,
	-1000, 17636, -1000, -1000, -1000, 17636, 366, 17636, 17636, 429,
	-1000, 529, 17636, 836, 17636, -1000, 15854, -1000, -1000, -1000,
	-1000, 429, 249, 292, 297, -1000, -1000, 453, -1000, -1000,
	2076, -1000, -1000, -1000, -1000, 425, 11594, 11594, 11594, 865,
	2076, 2012, 560, 316, 199, 362, 362, 229, 229, 229,
	229, 229, 600, 600, -1000, -1000, -1000, 544, -1000, -1000,
	-1000, 544, 9109, 9109, 764, 788, 175, -1000, 827, -1000,
	-1000, 987, 715, 715, 538, 666, 280, 1022, 715, 268,
	1019, 715, 715, 9109, -1000, -1000, 390, -1000, 10529, 544,
	-1000, 172, -1000, 951, 760, 750, 715, 544, 544, 715,
	715, -274, -1000, 565, -1000, 321, -1000, 958, -1000, -1000,
	914, 10529, 10529, 10529, -1000, -1000, -1000, 958, 992, -1000,
	924, 923, 1005, 9109, 15144, 1097, -1000, -1000, -1000, 169,
	787, 788, -1000, 17636, 15144, 15144, 15144, 15144, 15144, -1000,
	882, 874, -1000, 897, 896, 903, 17636, -1000, 729, 671,
	13369, 187, 788, -1000, 15499, -1000, -1000, 1005, 15144, 780,
	-1000, 780, -1000, 167, -1000, -1000, 745, -58, -65, -1000,
	-1000, -1000, -1000, 429, -1000, 693, 736, 4377, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 831, 588, -1000, 962, 224,
	322, 588, 960, -1000, -1000, -1000, 953, -1000, 384, -34,
	-1000, -1000, 472, -2, -2, -1000, -1000, 195, 931, 195,
	195, 195, 518, 518, -1000, -1000, -1000, -1000, 457, -1000,
	-1000, -1000, 452, -1000, 857, 17636, 5113, -1000, -1000, -1000,
	-1000, 312, 312, 243, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 66, 845, -1000, -1000, -1000,
	-1000, 28, 53, 103, -1000, 5113, -1000, 6585, 315, 366,
	315, -1000, -1000, -1000, -1000, -1000, 366, 17636, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 865, 2076, 1980, -1000,
	11594, 11594, -1000, -1000, 715, 715, 9109, 6585, 997, 958,
	-1000, -1000, 155, 686, 155, 11594, 11594, -1000, 11594, 11594,
	-1000, -154, 623, 309, -1000, 10529, 558, -1000, 6585, -1000,
	11594, 11594, -1000, -1000, -1000, -1000, -1000, 516, -1000, -1000,
	-1000, 540, -1000, -1000, 319, -1000, 748, -1000, 912, 429,
	429, -1000, -1000, 17636, -1000, -1000, -1000, -1000, 1003, 10529,
	-1000, 732, -1000, 5481, 856, 17636, 788, 1041, 13369, 17636,
	819, -1000, 317, 888, 835, 855, 1159, -1000, -1000, -1000,
	-1000, 873, -1000, 872, -1000, -1000, -1000, -1000, -1000, 671,
	-1000, 127, 124, 122, 17636, -1000, 997, 780, -1000, -1000,
	211, -1000, -1000, -100, -106, -1000, -1000, -1000, 4745, -1000,
	4745, 17636, 82, -1000, 588, 588, -1000, -1000, 830, 854,
	11594, -1000, -1000, -1000, 569, 195, 195, -1000, 350, -1000,
	-1000, -1000, 713, -1000, 707, 723, 705, 17636, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 17636, -1000, -1000,
	-1000, -1000, -1000, 17636, -160, 588, 17636, 17636, 17636, 17636,
	-1000, 162, 366, -1000, 366, -1000, 678, -1000, -1000, 11594,
	2076, 2076, -1000, -1000, 544, -1000, 987, -1000, 544, 824,
	824, -1000, 824, 829, -1000, 824, 16, 824, 15, 544,
	544, 1938, 1907, 1861, 1814, 788, -144, -1000, 429, 10529,
	-1000, 1794, 1248, -1000, -1000, 748, -1000, -1000, -1000, 999,
	989, 429, -1000, -1000, 968, 596, 667, -1000, -1000, 8754,
	669, 160, 653, -1000, 997, 17636, 10529, -1000, -1000, 10529,
	825, -1000, 10529, -1000, -1000, -1000, 997, 788, 788, 788,
	653, 987, -1000, -1000, -1000, -1000, 4377, -1000, 642, -1000,
	824, -1000, -1000, -1000, 17636, -23, 1031, 2076, -1000, -1000,
	-1000, -1000, -1000, -2, 511, -2, 450, -1000, 437, 5113,
	-1000, -1000, -1000, -1000, 970, -1000, 6585, -1000, -1000, 814,
	846, -1000, -1000, 6585, -1000, -1000, -1000, 17636, 2076, -1000,
	958, -1000, -1000, 156, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 11594, 11594, 11594, 11594, 11594, 987, 508, 429,
	11594, 11594, -1000, -1000, 10529, 10529, 959, -1000, 788, -1000,
	800, 17636, 17636, -1000, 17636, 987, -1000, 429, 429, 17636,
	429, 14789, 17636, 17636, 13014, -1000, 177, 17636, -1000, 636,
	225, -1000, -128, 195, -1000, 195, 559, 549, -1000, 788,
	700, -1000, 310, 17636, 17636, -1000, -1000, -1000, -1000, -1000,
	951, 951, 951, 951, 70, 544, -1000, 951, 951, 429,
	698, 1030, -1000, 788, 1041, 158, -1000, -1000, -1000, 632,
	628, -1000, 628, 628, 187, 177, -1000, 588, 258, 507,
	-1000, 79, 387, 957, -1000, 955, -1000, -1000, -1000, -1000,
	-1000, 64, 6585, 4745, 598, -1000, -1000, -1000, -1000, -1000,
	544, 65, -163, -1000, -1000, -1000, 17636, 667, 17636, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 418, -1000, -1000, 17636,
	-1000, 488, -1000, -1000, 582, -1000, 17636, -1000, -1000, 845,
	-1000, 902, -158, -167, 657, -1000, -1000, 791, -1000, -1000,
	64, 922, -160, -1000, 890, -1000, 17636, -1000, 61, -1000,
	-161, 562, 58, -164, 853, 788, -172, 820, -1000, 1010,
	10884, -1000, -1000, 1029, 215, 215, 951, 544, -1000, -1000,
	-1000, 86, 432, -1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1330, 1329, 22, 63, 64, 1327, 1326, 1320, 111,
	107, 106, 1319, 1318, 1317, 1316, 1315, 1314, 1312, 1307,
	1303, 1302, 1301, 1300, 1298, 1297, 1296, 1295, 1292, 1291,
	1289, 1288, 1287, 1283, 1280, 1278, 85, 1275, 81, 1274,
	1273, 1272, 1271, 1270, 1269, 1267, 1266, 1264, 46, 1031,
	70, 58, 1263, 55, 529, 1262, 76, 62, 109, 1261,
	43, 1260, 1259, 79, 1258, 1256, 57, 1255, 1254, 60,
	75, 77, 1253, 17, 36, 1252, 1251, 1250, 1248, 32,
	2639, 1246, 1242, 15, 1238, 1233, 108, 1227, 72, 20,
	11, 31, 25, 1221, 71, 1219, 8, 1218, 59, 1216,
	1212, 1209, 1203, 38, 1199, 61, 1197, 19, 16, 1195,
	7, 1194, 66, 29, 21, 9, 1193, 1192, 27, 74,
	54, 65, 1190, 1189, 509, 1188, 930, 51, 1187, 1186,
	101, 41, 1185, 102, 427, 1179, 1177, 1176, 1175, 24,
	795, 1892, 42, 68, 1171, 1170, 1169, 2839, 26, 56,
	14, 1168, 1166, 1161, 33, 1102, 48, 1160, 1159, 37,
	1157, 1155, 1152, 1151, 1150, 1149, 1147, 182, 1145, 1144,
	1131, 35, 13, 1128, 1127, 73, 30, 1126, 1124, 1122,
	49, 67, 1119, 1109, 53, 1108, 78, 39, 1107, 1105,
	1103, 1099, 1098, 34, 12, 1097, 18, 1096, 10, 1094,
	28, 1092, 4, 1085, 5, 1079, 1, 0, 1076, 3,
	1075, 1074, 50, 6, 1073, 2, 45, 1070, 1069, 1067,
	1062, 1048, 1762, 1472, 82, 1047, 96,
}
var yyR1 = [...]int{

	0, 220, 221, 221, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 207, 207, 207, 210, 211, 20, 3, 3,
	3, 3, 2, 2, 8, 4, 5, 5, 9, 9,
	39, 39, 10, 11, 11, 11, 11, 224, 224, 63,
	63, 64, 64, 112, 112, 12, 13, 13, 121, 121,
	120, 120, 120, 122, 122, 122, 122, 157, 157, 14,
	14, 14, 14, 14, 14, 14, 35, 35, 32, 32,
	32, 32, 47, 47, 47, 209, 209, 208, 206, 206,
	205, 205, 204, 21, 189, 191, 191, 190, 190, 190,
	190, 181, 160, 160, 160, 160, 163, 163, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 162, 162, 162,
	162, 162, 164, 164, 164, 164, 164, 165, 165, 165,
	165, 165, 165, 165, 165, 165, 165, 165, 165, 165,
	165, 165, 166, 166, 166, 166, 166, 166, 166, 166,
	180, 180, 167, 167, 175, 175, 176, 176, 176, 173,
	173, 174, 174, 177, 177, 177, 169, 169, 170, 170,
	178, 178, 171, 171, 171, 172, 172, 172, 179, 179,
	179, 179, 179, 168, 168, 182, 182, 199, 199, 198,
	198, 198, 34, 188, 188, 195, 195, 195, 195, 195,
	185, 185, 185, 186, 186, 184, 184, 187, 187, 197,
	197, 196, 183, 183, 200, 200, 200, 200, 214, 215,
	213, 213, 213, 213, 213, 192, 192, 192, 193, 193,
	193, 194, 194, 194, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 203, 201, 201, 202, 202,
	16, 22, 22, 17, 17, 17, 17, 17, 18, 18,
	23, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 128, 128, 130, 130, 126, 126, 129, 129, 127,
	127, 127, 131, 131, 131, 132, 132, 158, 158, 158,
	25, 25, 27, 27, 28, 29, 29, 152, 152, 153,
	153, 30, 31, 40, 40, 40, 40, 40, 40, 42,
	42, 42, 7, 7, 7, 7, 41, 41, 41, 6,
	6, 26, 26, 26, 26, 19, 225, 36, 37, 37,
	38, 38, 38, 44, 44, 44, 43, 43, 43, 50,
	50, 52, 52, 52, 52, 52, 53, 53, 53, 53,
	53, 53, 49, 49, 51, 51, 51, 51, 144, 144,
	144, 143, 143, 55, 55, 56, 56, 57, 57, 58,
	58, 58, 95, 72, 72, 111, 111, 110, 110, 113,
	113, 59, 59, 59, 59, 60, 60, 61, 61, 62,
	62, 151, 151, 150, 150, 150, 149, 149, 65, 65,
	65, 67, 66, 66, 66, 66, 68, 68, 70, 70,
	69, 69, 69, 69, 71, 73, 73, 73, 73, 73,
	74, 74, 54, 54, 54, 54, 54, 54, 54, 54,
	125, 125, 76, 76, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 87, 87, 87, 87, 87, 87,
	77, 77, 77, 77, 77, 77, 77, 48, 48, 88,
	88, 88, 94, 89, 89, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 84,
	84, 84, 84, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 226, 226, 86, 85, 85, 85, 85, 85,
	85, 85, 45, 45, 45, 45, 45, 156, 156, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 99, 99, 46, 46, 97, 97, 98, 100,
	100, 96, 96, 96, 79, 79, 79, 79, 79, 79,
	79, 79, 81, 81, 81, 101, 101, 102, 102, 103,
	103, 104, 104, 105, 106, 106, 106, 107, 107, 107,
	107, 108, 108, 108, 78, 78, 78, 78, 109, 109,
	109, 109, 114, 114, 90, 90, 92, 92, 91, 93,
	115, 115, 118, 116, 116, 116, 119, 119, 119, 119,
	117, 117, 117, 146, 146, 146, 123, 123, 133, 133,
	134, 134, 124, 124, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 136, 136, 136, 137, 137, 138,
	138, 138, 145, 145, 141, 141, 142, 142, 147, 147,
	148, 148, 216, 217, 218, 218, 219, 219, 219, 33,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	222, 223, 154, 155, 155, 155,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 1, 2, 4, 6,
	6, 7, 4, 6, 5, 8, 1, 3, 7, 8,
	1, 1, 9, 8, 7, 6, 6, 1, 1, 1,
	3, 1, 3, 0, 4, 3, 5, 4, 1, 3,
	3, 2, 2, 2, 2, 2, 1, 1, 1, 2,
	2, 8, 4, 6, 5, 5, 0, 1, 4, 5,
	6, 4, 1, 1, 1, 0, 2, 1, 0, 2,
	1, 3, 3, 4, 4, 2, 4, 1, 3, 3,
	3, 8, 3, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 2, 2, 2, 1, 4, 4, 2,
	2, 3, 3, 3, 3, 1, 1, 1, 1, 1,
	6, 6, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 3, 0, 5, 0, 3, 5, 0,
	1, 0, 1, 0, 1, 2, 0, 2, 0, 3,
	0, 1, 0, 3, 3, 0, 2, 2, 0, 2,
	1, 2, 1, 0, 2, 5, 4, 1, 2, 2,
	3, 2, 2, 0, 1, 2, 3, 3, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	3, 2, 3, 1, 10, 11, 11, 12, 3, 3,
	1, 1, 2, 2, 2, 0, 1, 3, 1, 2,
	3, 1, 1, 1, 6, 7, 7, 7, 7, 4,
	5, 4, 4, 7, 5, 5, 5, 12, 7, 5,
	9, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 7, 1, 3, 8, 8,
	3, 3, 5, 4, 6, 5, 4, 4, 3, 2,
	3, 4, 4, 3, 4, 4, 4, 4, 4, 4,
	3, 2, 7, 2, 3, 4, 3, 7, 5, 4,
	2, 4, 4, 3, 3, 5, 2, 6, 4, 3,
	6, 1, 1, 0, 1, 0, 1, 1, 1, 0,
	2, 2, 0, 2, 2, 0, 2, 0, 1, 1,
	2, 1, 1, 2, 1, 1, 5, 0, 1, 0,
	1, 2, 3, 0, 3, 3, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 5,
	3, 2, 2, 3, 3, 2, 0, 2, 0, 2,
	1, 2, 2, 0, 1, 1, 0, 1, 1, 0,
	1, 0, 1, 2, 3, 4, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 1, 0, 2, 1, 3, 1, 1, 1,
	3, 3, 3, 3, 7, 0, 3, 1, 3, 1,
	3, 4, 4, 4, 3, 2, 4, 0, 1, 0,
	2, 0, 1, 0, 1, 2, 1, 1, 1, 2,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 1,
	1, 3, 5, 7, 3, 0, 5, 4, 5, 5,
	0, 2, 1, 3, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 3, 1, 1, 1, 1, 4,
	5, 5, 6, 4, 4, 6, 6, 6, 8, 8,
	8, 8, 9, 8, 5, 4, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	8, 8, 0, 2, 3, 4, 4, 4, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 2, 1, 2, 2,
	1, 2, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 0, 3, 0, 2, 0,
	3, 1, 3, 2, 0, 1, 1, 0, 2, 4,
	4, 0, 2, 4, 2, 1, 5, 4, 1, 3,
	3, 5, 0, 5, 1, 3, 1, 2, 3, 1,
	1, 3, 3, 1, 2, 3, 3, 3, 3, 3,
	1, 2, 1, 1, 1, 1, 1, 1, 0, 2,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 0,
	1, 1, 0, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 0, 1, 0, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -220, -1, -3, -8, -9, -10, -11, -12, -13,
	-14, -15, -16, -17, -18, -23, -24, -25, -27, -28,
	-29, -30, -31, -6, -26, -19, -20, -32, -33, -34,
	-4, -222, 6, 7, -39, 9, 10, 30, -21, 123,
	124, 126, 125, 159, 127, 152, 53, 173, 174, 176,
	177, 178, 179, -42, 157, 158, 31, 32, 129, 34,
	-35, 371, 370, 57, 8, 262, 154, 153, 25, 372,
	-221, 373, -38, 5, -103, 15, -3, -36, -225, -36,
	-36, -36, -36, -36, -189, -191, 57, 96, -138, 133,
	77, 254, 130, 131, 137, -141, -207, -140, 60, 61,
	62, 272, 145, 304, 305, 364, 173, 187, 181, 208,
	200, 273, 306, 146, 198, 201, 241, 143, 307, 228,
	235, 71, 176, 250, 308, 155, 196, 192, 309, 281,
	190, 27, 310, 237, 213, 311, 371, 277, 239, 191,
	236, 129, 312, 148, 141, 313, 214, 218, 314, 242,
	315, 316, 317, 372, 185, 186, 365, 318, 144, 244,
	212, 142, 33, 274, 37, 163, 245, 216, 319, 211,
	207, 366, 320, 321, 322, 323, 210, 184, 206, 41,
	220, 219, 221, 240, 203, 324, 325, 326, 149, 327,
	193, 18, 328, 329, 330, 331, 332, 248, 158, 333,
	161, 334, 335, 336, 337, 338, 339, 238, 215, 217,
	138, 165, 234, 276, 340, 246, 189, 341, 150, 162,
	157, 249, 151, 342, 343, 344, 345, 346, 347, 367,
	348, 177, 368, 349, 350, 351, 352, 172, 369, 243,
	252, 40, 225, 353, 183, 370, 140, 354, 174, 169,
	230, 204, 164, 355, 356, 194, 195, 209, 182, 205,
	175, 166, 159, 357, 251, 226, 278, 202, 199, 170,
	358, 167, 168, 359, 231, 232, 171, 275, 247, 197,
	227, -124, 133, 254, 130, 232, 135, 131, 131, 132,
	133, 254, 130, 131, -69, -147, -207, -140, 133, 131,
	114, 201, 241, 123, 229, 237, -130, 238, 165, -158,
	131, -126, 228, 231, 232, 171, 364, 8, 239, 243,
	242, 233, -147, 175, -152, 180, -141, 178, -126, -40,
	360, 127, -154, -154, 230, 230, -154, -89, -54, -75,
	80, -80, 29, 23, -79, -76, -96, -93, -94, 114,
	115, 117, 116, 118, 103, 104, 111, 81, 119, -84,
	-82, -83, -85, 64, 63, 72, 65, 66, 67, 68,
	73, 74, 75, -141, -147, -91, -222, 47, 48, 263,
	264, 265, 266, 271, 267, 83, 36, 253, 261, 260,
	259, 257, 258, 255, 256, 269, 270, 136, 254, 130,
	109, 262, -207, -140, 364, -36, 65, -5, -4, -222,
	6, 20, 21, -107, 17, 16, -223, 59, -44, -52,
	42, 43, -53, 21, 35, 46, 44, -37, -51, 105,
	-54, -147, -124, -124, 11, -63, -64, -69, -71, -147,
	-116, -157, 175, -119, 243, 242, -142, -117, -141, -139,
	241, 201, 240, 128, 279, 79, 22, 24, 223, 82,
	114, 16, 83, 113, 263, 123, 51, 280, 255, 256,
	253, 265, 266, 254, 229, 29, 10, 282, 25, 153,
	21, 35, 107, 125, 86, 87, 156, 23, 154, 75,
	285, 19, 54, 11, 13, 286, 287, 14, 136, 135,
	98, 132, 49, 8, 119, 26, 95, 45, 288, 28,
	289, 290, 291, 292, 47, 96, 17, 257, 258, 31,
	293, 271, 160, 109, 52, 38, 80, 294, 295, 73,
	296, 76, 55, 77, 15, 50, 297, 298, 299, 300,
	97, 126, 262, 48, 301, 130, 6, 268, 30, 152,
	46, 302, 131, 85, 269, 270, 134, 74, 5, 137,
	32, 9, 53, 56, 259, 260, 261, 36, 84, 12,
	303, 78, -190, 96, -181, -207, -69, 132, -69, 262,
	-134, 136, -134, -134, 131, -69, -207, -207, 123, 125,
	128, 55, -22, -69, -133, 136, -207, -133, -133, -133,
	-69, 120, -69, -207, 30, -131, 96, 12, 254, -207,
	165, 131, 166, 133, -155, -222, -142, -185, -207, 132,
	33, 144, -155, 169, 170, -155, -129, -128, 235, 236,
	230, 234, 12, 170, 230, 168, -187, -207, -36, 134,
	-141, -130, -7, -3, -10, -9, -11, 88, -154, -154,
	58, 79, 77, 78, 95, -54, -77, 98, 80, 96,
	97, 82, 100, 99, 110, 103, 104, 105, 106, 107,
	108, 109, 101, 102, 113, 88, 89, 90, 91, 92,
	93, 94, -125, -222, -94, -222, 121, 122, -80, -80,
	-80, -80, -80, -80, -80, -80, -80, -80, -222, 120,
	-2, -89, -4, -222, -222, -222, -222, -222, -222, -222,
	-222, -99, -54, -222, -226, -86, -222, -226, -86, -226,
	-86, -226, -222, -226, -86, -226, -86, -226, -226, -86,
	-222, -222, -222, -222, -222, -222, -222, 366, 367, -69,
	-103, -3, -36, -108, 19, 31, -54, -104, -105, -54,
	-103, 38, -49, -51, -53, 42, 43, 70, 11, -144,
	-143, 22, -141, 64, 120, -70, 26, -69, -56, -57,
	-58, -59, -72, -95, -222, -69, -69, -63, -224, 58,
	11, 56, -224, 58, 120, 58, 175, -119, -121, -120,
	244, 246, 88, -146, -141, 64, 29, 30, 59, 58,
	-69, -160, -163, -165, -164, -166, -161, -162, 198, 199,
	114, 202, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 30, 155, 194, 195, 196, 197, 214, 215,
	216, 217, 218, 219, 220, 221, 181, 200, 273, 182,
	183, 184, 185, 186, 187, 189, 190, 191, 192, 193,
	-207, -155, 133, -207, 80, -207, -69, -69, -155, -155,
	-155, 167, 167, 131, 131, 172, -69, 58, 134, -63,
	23, 55, -69, -207, -207, -148, -147, -139, -155, -131,
	64, -54, -155, -155, -155, -69, -155, -155, -186, 11,
	98, -186, -131, -155, -155, 11, -127, 11, 98, -54,
	-132, 96, 55, -70, -153, 178, -69, 212, 361, 362,
	363, -54, -54, -54, -54, -87, 73, 80, 74, 75,
	-80, -88, -91, -94, 69, 98, 96, 97, 82, -80,
	-80, -80, -80, -80, -80, -80, -80, -80, -80, -80,
	-80, -80, -80, -80, -156, -207, 64, -207, -79, -79,
	-141, -50, 21, 35, -49, -142, -148, -139, -38, -223,
	-223, -103, -49, -49, -54, -54, -96, 64, -49, -96,
	64, -49, -49, -43, 21, 35, -97, -98, 84, -96,
	-141, -147, -223, -80, -141, -141, -49, -50, -50, -49,
	-49, -187, -187, -219, -216, -210, 61, -107, -223, 9,
	98, 58, 18, 58, -106, 24, 25, -107, -81, -141,
	65, 68, -55, 58, 11, -53, -69, -143, 105, -148,
	-112, 161, -69, 30, 58, -65, -67, -66, -68, 45,
	49, 51, 46, 47, 48, 52, -151, 22, -56, -3,
	-222, -150, 161, -149, 22, -147, 64, -112, 56, -56,
	-69, -56, -71, -147, 105, -119, -121, 58, 245, 247,
	248, 55, 76, -54, -172, 113, -192, -193, -194, -142,
	64, 65, -181, -182, -183, -195, 147, -200, 138, 140,
	137, -184, 148, 132, 28, 59, -177, 73, 80, -173,
	226, -167, 57, -167, -167, -167, -167, -171, 201, -171,
	-171, -171, 57, 57, -167, -167, -167, -175, 57, -175,
	-175, -176, 57, -176, -145, 56, -69, -155, 23, -155,
	-135, 128, 125, 126, -203, 124, 223, 201, 71, 29,
	15, 263, 161, 278, -207, 162, -69, -69, -69, -69,
	-69, 128, 125, -69, -69, -69, -155, 120, -69, -69,
	-69, -131, -147, -147, 64, -69, -111, 57, -141, -41,
	-141, 64, 73, 74, 75, -88, -80, -80, -80, -48,
	156, 79, -223, -223, -49, -49, -222, 120, -5, -107,
	-223, -223, 58, 56, 22, 11, 11, -223, 11, 11,
	-223, -223, -49, -100, -98, 86, -54, -223, 120, -223,
	58, 58, -223, -223, -223, -223, -223, -47, 365, 369,
	368, 58, -218, -217, -211, 62, 88, -108, 40, -54,
	-54, -105, -108, -123, 19, 11, 36, 36, -74, 12,
	-51, -56, -53, 120, -78, 30, 36, -3, -222, -222,
	-115, -118, -96, -57, -58, -58, -57, -58, 45, 45,
	45, 50, 45, 50, 45, -66, -147, -223, -223, -3,
	-73, 53, 135, 54, -222, -149, -74, -56, -74, -74,
	120, -120, -122, 249, 246, 252, -207, 64, 58, -194,
	88, 57, -207, 28, -184, -184, -187, -187, 28, -169,
	29, 73, -174, 227, 65, -171, -171, -172, 30, -172,
	-172, -172, -180, 64, -180, 65, 65, 55, -141, -155,
	-154, -212, 143, 139, 147, 148, 141, 60, 61, 62,
	132, 28, 138, 140, 161, 137, -212, -136, -137, 134,
	22, 132, 28, 161, -209, 56, 167, 223, 167, 134,
	-155, -148, -127, -131, -127, -131, -110, -141, -48, 79,
	-80, -80, -223, -223, -50, -142, -103, -108, -159, 114,
	198, 155, 196, 192, 212, 203, 225, 194, 226, -156,
	-159, -80, -80, -80, -80, 272, -103, 87, -54, 85,
	-142, -80, -80, 64, -216, 88, -79, 41, -69, -101,
	13, -54, 105, -114, 55, -115, -90, -92, -91, -222,
	-109, -141, -113, -141, -74, 58, 88, -61, -60, 55,
	56, -62, 55, -60, 45, 45, -223, 132, 132, 132,
	-113, -103, -74, 246, 250, 251, -193, -194, -197, -196,
	-141, -200, -187, -187, 57, -170, 55, -80, 59, -172,
	-172, -207, 114, 59, 58, 59, 58, 59, 58, -69,
	-154, -154, -69, -154, -141, -206, 275, -208, -207, -141,
	-141, -141, -69, 120, -131, -131, 59, 58, -80, -223,
	-107, -223, -167, -167, -167, -176, -167, 186, -167, 186,
	-223, -223, 19, 19, 19, 19, -222, -46, 268, -54,
	58, 58, -79, -102, 14, 16, 27, -114, 58, -223,
	-223, 58, 120, -223, 58, -103, -118, -54, -54, 57,
	-54, -222, -222, -222, -223, -107, 59, 58, -167, -110,
	-178, 223, 9, -171, 64, -171, 65, 65, -155, 26,
	-205, -204, -142, 57, 56, -148, -141, -108, -171, -207,
	-80, -80, -80, -80, -80, -107, 64, -80, -80, -54,
	-89, 28, -92, 36, -3, -141, -141, -141, -107, -110,
	-110, -223, -110, -110, -150, -199, -198, 56, 142, 71,
	-196, 59, -179, 138, 28, 137, -83, -172, -172, 59,
	59, -222, 58, 88, -110, -69, -223, -223, -223, -223,
	-45, 98, 275, -223, -223, -223, 9, -90, 120, 59,
	-223, -223, -223, -73, -198, -207, -188, 88, 64, 150,
	-168, 71, 28, 28, -201, -202, 161, -204, -194, 59,
	-223, 273, 52, 276, -115, -141, 65, -69, 64, -223,
	58, -141, -209, 41, 274, 277, 57, -202, 36, -206,
	41, -110, 163, 275, 59, 164, 276, -214, -215, 55,
	-222, 277, -215, 55, 10, 9, -80, 160, -213, 151,
	146, 149, 30, -213, -223, -223, 145, 29, 73,
}
var yyDef = [...]int{

	-2, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
	639, 0, 376, 376, 376, 376, 376, 376, 0, 709,
	692, 0, 0, 0, 0, -2, 341, 342, 0, 344,
	-2, 0, 0, -2, 1032, 1032, 0, 0, 1032, 0,
	0, 376, 0, 1030, 50, 51, 359, 360, 361, 87,
	1, 3, 0, 380, 647, 0, 0, -2, 378, 0,
	692, 692, 0, 0, 79, 80, 0, 0, 0, 1019,
	0, 690, 690, 690, 710, 711, 714, 715, 32, 33,
	34, 849, 850, 851, 852, 853, 854, 855, 856, 857,
	858, 859, 860, 861, 862, 863, 864, 865, 866, 867,
	868, 869, 870, 871, 872, 873, 874, 875, 876, 877,
	878, 879, 880, 881, 882, 883, 884, 885, 886, 887,
	888, 889, 890, 891, 892, 893, 894, 895, 896, 897,
	898, 899, 900, 901, 902, 903, 904, 905, 906, 907,
	908, 909, 910, 911, 912, 913, 914, 915, 916, 917,
	918, 919, 920, 921, 922, 923, 924, 925, 926, 927,
	928, 929, 930, 931, 932, 933, 934, 935, 936, 937,
	938, 939, 940, 941, 942, 943, 944, 945, 946, 947,
	948, 949, 950, 951, 952, 953, 954, 955, 956, 957,
	958, 959, 960, 961, 962, 963, 964, 965, 966, 967,
	968, 969, 970, 971, 972, 973, 974, 975, 976, 977,
	978, 979, 980, 981, 982, 983, 984, 985, 986, 987,
	988, 989, 990, 991, 992, 993, 994, 995, 996, 997,
	998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007,
	1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017,
	1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028,
	1029, 0, 0, 0, 0, 0, 693, 0, 688, 0,
	688, 688, 688, 0, 289, 460, 718, 719, 1019, 0,
	0, 0, 332, 0, 1033, 301, 0, 303, 1033, 0,
	1033, 0, 310, 0, 0, 316, 217, 376, 324, 338,
	339, 326, 340, 343, 0, 348, 351, 0, 323, 0,
	0, 358, 371, 372, 1032, 1032, 375, 37, 513, 472,
	0, 478, 480, 0, 515, 516, 517, 518, 519, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 545,
	546, 547, 548, 624, 625, 626, 627, 628, 629, 630,
	631, 482, 483, 621, 0, 669, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 612, 0, 582, 582, 582,
	582, 582, 582, 582, 582, 0, 0, 0, 0, 0,
	0, 0, -2, -2, 0, 0, 202, 639, 46, 0,
	376, 381, 382, 651, 0, 0, 639, 1031, 0, 0,
	-2, -2, 392, 398, 399, 400, 401, 377, 0, 404,
	408, 0, 0, 0, 0, 0, 0, 59, 61, 460,
	65, 0, 1008, 673, -2, -2, 0, 0, 716, 717,
	-2, 863, -2, 730, 731, 732, 733, 734, 735, 736,
	737, 738, 739, 740, 741, 742, 743, 744, 745, 746,
	747, 748, 749, 750, 751, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 762, 763, 764, 765, 766,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 779, 780, 781, 782, 783, 784, 785, 786,
	787, 788, 789, 790, 791, 792, 793, 794, 795, 796,
	797, 798, 799, 800, 801, 802, 803, 804, 805, 806,
	807, 808, 809, 810, 811, 812, 813, 814, 815, 816,
	817, 818, 819, 820, 821, 822, 823, 824, 825, 826,
	827, 828, 829, 830, 831, 832, 833, 834, 835, 836,
	837, 838, 839, 840, 841, 842, 843, 844, 845, 846,
	847, 848, 0, 0, 107, 0, 105, 0, 1033, 0,
	0, 0, 0, 0, 0, 1033, 1033, 1033, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	288, 0, 290, 1033, 332, 293, 0, 0, 1033, 1033,
	1033, 0, 1033, 1033, 300, 1034, 1035, 0, 332, 210,
	211, 212, 304, 1033, 1033, 306, 0, 329, 327, 328,
	321, 322, 0, 335, 313, 314, 319, 218, 0, 349,
	352, 0, 370, 362, 363, 364, 365, 0, 373, 374,
	0, 0, 0, 0, 0, 476, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 500, 501, 502, 503, 504,
	505, 506, 479, 0, 493, 0, 0, 0, 535, 536,
	537, 538, 539, 540, 541, 542, 543, 0, 389, 0,
	0, 0, 639, 0, 0, 0, 0, 0, 0, 0,
	386, 0, 613, 0, 566, 574, 0, 567, 575, 568,
	576, 569, 0, 570, 577, 571, 578, 572, 573, 579,
	0, 0, 0, 389, 389, 0, 0, 217, 217, 726,
	647, 0, 391, 38, 0, 0, 648, 640, 641, 644,
	647, 0, 413, 402, 393, 396, 397, 379, 0, 405,
	409, 0, 411, 412, 0, 63, 0, 459, 0, 415,
	417, 418, 419, 441, 0, 443, -2, 0, 0, 0,
	57, 58, 0, 0, 0, 0, 1008, 674, 67, 68,
	0, 0, 0, 185, 683, 684, 685, 681, 235, 0,
	0, 173, 169, 113, 114, 115, 162, 117, 162, 162,
	162, 162, 182, 182, 182, 182, 145, 146, 147, 148,
	149, 0, 0, 132, 162, 162, 162, 136, 152, 153,
	154, 155, 156, 157, 158, 159, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 164, 164, 164, 166, 166,
	712, 82, 0, 1033, 0, 1033, 103, 0, 249, 251,
	252, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	689, 0, 1033, 286, 287, 461, 720, 721, 291, 292,
	333, 334, 294, 295, 296, 297, 298, 299, 0, 213,
	214, 0, 318, 305, 309, 0, 332, 0, 0, 311,
	312, 0, 0, 425, 0, 350, 366, 354, 355, 356,
	357, 514, 473, 474, 475, 477, 494, 0, 496, 498,
	484, 485, 509, 510, 511, 0, 0, 0, 0, 507,
	489, 0, 520, 521, 522, 523, 524, 525, 526, 527,
	528, 529, 530, 531, 534, 597, 598, 0, 532, 533,
	544, 0, 0, 0, 390, 622, 0, -2, 0, 512,
	668, 647, 0, 0, 0, 0, 517, 624, 0, 517,
	624, 0, 0, 0, 387, 388, 619, 616, 0, 0,
	621, 0, 583, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 91, 724, 727, 0, 35, 651, 47, 652,
	0, 0, 0, 0, 643, 645, 646, 651, 0, 632,
	0, 0, 470, 0, 0, 394, 44, 410, 406, 0,
	0, 0, 458, 0, 0, 0, 0, 0, 0, 448,
	0, 0, 451, 0, 0, 0, 0, 442, 0, 0,
	0, 465, 948, 444, 0, 446, 447, 470, 0, 470,
	60, 470, 62, 0, 464, 675, 66, 0, 0, 71,
	72, 676, 677, 678, 679, 0, 104, 236, 238, 241,
	242, 243, 108, 109, 110, 0, 0, 223, 0, 0,
	217, 217, 0, 215, 216, 106, 176, 174, 0, 171,
	170, 116, 0, 182, 182, 139, 140, 185, 0, 185,
	185, 185, 0, 0, 133, 134, 135, 127, 0, 128,
	129, 130, 0, 131, 0, 0, 1033, 84, 691, 85,
	1032, 0, 0, 704, 250, 694, 695, 696, 697, 698,
	699, 700, 701, 702, 703, 0, 95, 254, 256, 255,
	259, 0, 0, 0, 281, 1033, 285, 0, 329, 332,
	329, 308, 330, 331, 336, 315, 332, 0, 346, 369,
	367, 368, 495, 497, 499, 486, 507, 490, 0, 487,
	0, 0, 481, 549, 0, 0, 389, 0, 639, 651,
	553, 554, 0, 0, 0, 0, 0, 590, 0, 0,
	591, 0, 639, 0, 617, 0, 0, 565, 0, 584,
	0, 0, 585, 586, 587, 588, 589, 89, 92, 93,
	94, 0, 729, 725, 0, 36, 0, 40, 0, 649,
	650, 642, 39, 0, 686, 687, 633, 634, 635, 0,
	403, 414, 395, 0, 662, 0, 0, 655, 0, 0,
	470, 670, 0, 416, 437, 439, 0, 434, 449, 450,
	452, 0, 454, 0, 456, 457, 420, 421, 422, 0,
	423, 0, 0, 0, 0, 445, 639, 470, 55, 56,
	0, 69, 70, 0, 0, 76, 186, 187, 0, 239,
	0, 0, 0, 205, 217, 217, 208, 209, 0, 178,
	0, 175, 112, 172, 0, 185, 185, 141, 0, 142,
	143, 144, 0, 160, 0, 0, 0, 0, 713, 83,
	244, 1032, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 1032, 0, 1032, 705,
	706, 707, 708, 0, 98, 0, 0, 0, 0, 0,
	284, 462, 332, 317, 332, 320, 0, 427, 488, 0,
	508, 491, 550, 551, 0, 623, 647, 42, 0, 162,
	162, 602, 162, 166, 605, 162, 607, 162, 610, 0,
	0, 0, 0, 0, 0, 0, 614, 564, 620, 0,
	622, 0, 0, 90, 728, 0, 722, 653, 41, 637,
	0, 471, 407, 48, 0, 662, 654, 664, 666, 0,
	0, 658, 0, 429, 639, 0, 0, 431, 438, 0,
	0, 432, 0, 433, 453, 455, -2, 0, 0, 0,
	0, 647, 54, 73, 74, 75, 237, 240, 0, 219,
	162, 222, 206, 207, 0, 180, 0, 177, 163, 137,
	138, 183, 184, 182, 0, 182, 0, 167, 0, 1033,
	245, 246, 247, 248, 0, 253, 0, 96, 97, 0,
	0, 258, 282, 0, 302, 307, 426, 0, 492, 552,
	651, 555, 599, 182, 603, 604, 606, 608, 609, 611,
	557, 556, 0, 0, 0, 0, 0, 647, 0, 618,
	0, 0, 723, 45, 0, 0, 0, 49, 0, 667,
	0, 0, 0, 64, 0, 647, 671, 672, 435, 0,
	440, 0, 0, 0, 443, 53, 196, 0, 221, 0,
	188, 181, 0, 185, 161, 185, 0, 0, 81, 0,
	99, 100, 0, 0, 0, 463, 428, 43, 600, 601,
	0, 0, 0, 0, 592, 0, 615, 0, 0, 638,
	636, 0, 665, 0, 657, 660, 659, 430, 52, 0,
	0, 467, 0, 0, 465, 195, 197, 0, 203, 0,
	220, 0, 193, 0, 190, 192, 179, 150, 151, 165,
	168, 0, 0, 0, 0, 260, 558, 560, 559, 561,
	0, 0, 0, 563, 580, 581, 0, 656, 0, 436,
	466, 468, 469, 424, 198, 199, 0, 204, 201, 0,
	111, 0, 189, 191, 0, 276, 0, 101, 102, 95,
	562, 0, 0, 0, 663, 661, 200, 0, 194, 275,
	0, 0, 98, 593, 0, 596, 0, 277, 0, 257,
	594, 0, 0, 0, 224, 0, 0, 225, 226, 0,
	0, 595, 227, 0, 0, 0, 0, 0, 228, 230,
	231, 0, 0, 229, 278, 279, 232, 233, 234,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 81, 3, 3, 3, 108, 100, 3,
	57, 59, 105, 103, 58, 104, 120, 106, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 373,
	89, 88, 90, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 110, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 99, 3, 111,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 82, 83, 84, 85,
	86, 87, 91, 92, 93, 94, 95, 96, 97, 98,
	101, 102, 107, 109, 112, 113, 114, 115, 116, 117,
	118, 119, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:355
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:360
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:361
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:365
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 31:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:395
		{
			setParseTree(yylex, nil)
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:401
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:405
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:409
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:415
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:421
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 37:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:427
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:433
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 39:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:441
		{
			yyVAL.selStmt = &Union{FirstStatement: &ParenSelect{Select: yyDollar[2].selStmt}, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:445
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].str, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].str)
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:449
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), SelectExprs{Nextval{Expr: yyDollar[5].expr}}, []string{yyDollar[3].str} /*options*/, TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:472
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:480
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].str, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].str)
		}
	case 44:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:486
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:494
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), yyDollar[4].selectExprs /*SelectExprs*/, yyDollar[3].strs /*options*/, yyDollar[5].tableExprs /*from*/, NewWhere(WhereStr, yyDollar[6].expr), GroupBy(yyDollar[7].exprs), NewWhere(HavingStr, yyDollar[8].expr))
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:500
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:504
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 48:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:511
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 49:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:523
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:535
		{
			yyVAL.str = InsertStr
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:539
		{
			yyVAL.str = ReplaceStr
		}
	case 52:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:545
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 53:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:551
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 54:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:555
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 55:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:559
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 56:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:563
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:568
		{
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:569
		{
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:573
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:577
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:583
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:587
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:592
		{
			yyVAL.partitions = nil
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:596
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:602
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:608
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Characteristics: yyDollar[5].characteristics}
		}
	case 67:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:612
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Characteristics: yyDollar[4].characteristics}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:618
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:622
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[3].characteristic)
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:628
		{
			yyVAL.characteristic = &IsolationLevel{Level: string(yyDollar[3].str)}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:632
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadWrite}
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:636
		{
			yyVAL.characteristic = &AccessMode{Mode: TxReadOnly}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:642
		{
			yyVAL.str = RepeatableRead
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:646
		{
			yyVAL.str = ReadCommitted
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:650
		{
			yyVAL.str = ReadUncommitted
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:654
		{
			yyVAL.str = Serializable
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:660
		{
			yyVAL.str = SessionStr
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:664
		{
			yyVAL.str = GlobalStr
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:670
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:675
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 81:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:681
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:686
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 83:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:690
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 84:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:694
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 85:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:698
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 86:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:703
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:707
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:713
		{
			yyVAL.statement = &Auth{SessionAuth: yyDollar[1].boolVal, Provider: yyDollar[4].str}
		}
	case 89:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:718
		{
			yyVAL.statement = &Auth{SessionAuth: yyDollar[1].boolVal, Provider: yyDollar[4].str, Type: yyDollar[5].str}
		}
	case 90:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:723
		{
			yyVAL.statement = &Auth{SessionAuth: yyDollar[1].boolVal, Provider: yyDollar[4].str, Type: yyDollar[5].str, KeyFilePath: string(yyDollar[6].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:728
		{
			yyVAL.statement = &AuthRevoke{SessionAuth: yyDollar[1].boolVal, Provider: yyDollar[4].str}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:734
		{
			yyVAL.str = InteractiveStr
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:738
		{
			yyVAL.str = ServiceAccountStr
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:742
		{
			yyVAL.str = ServiceAccountStr
		}
	case 95:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:748
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:752
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:758
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:763
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:768
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:774
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:779
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:785
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 103:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:791
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 104:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:798
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:805
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 106:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:809
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:815
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:820
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:824
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:828
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 111:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:834
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:845
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:856
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:861
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:867
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:871
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:875
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:879
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:883
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:887
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:891
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:895
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:899
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:905
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:911
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:917
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:923
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:929
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:937
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:941
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:945
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:949
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:953
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:959
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 138:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:963
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:967
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:971
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:975
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:979
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:983
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:987
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:991
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:995
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:999
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1003
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1007
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 150:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1011
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 151:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1016
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1022
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1026
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1030
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1034
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1038
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1042
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1046
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1050
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1056
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1061
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1066
		{
			yyVAL.sqlVal = nil
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1070
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1075
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 165:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1079
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1087
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1091
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 168:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1097
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1105
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1109
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 171:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1114
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1118
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1124
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1128
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1132
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1137
		{
			yyVAL.optVal = nil
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1141
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1146
		{
			yyVAL.optVal = nil
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1150
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 180:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1155
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1159
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1164
		{
			yyVAL.str = ""
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1168
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1172
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1177
		{
			yyVAL.str = ""
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1181
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1185
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1190
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1194
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1198
		{
			yyVAL.colKeyOpt = colKey
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1202
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1206
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1211
		{
			yyVAL.sqlVal = nil
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1215
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1221
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 196:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1225
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1231
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1235
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1241
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].colIdent.String())}
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1245
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1250
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1256
		{
			yyVAL.statement = &Sleep{Duration: NewIntVal(yyDollar[2].bytes)}
		}
	case 203:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1262
		{
			yyVAL.str = ""
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1266
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1272
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1276
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1280
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1284
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1288
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1294
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1298
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1302
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1309
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1313
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1319
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1323
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 217:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1328
		{
			yyVAL.str = ""
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1332
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1338
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1342
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1348
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1354
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1358
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 224:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1365
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 225:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1369
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 226:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1373
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 227:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1377
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1383
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1389
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1395
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1399
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1403
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1407
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1411
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 235:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1416
		{
			yyVAL.str = ""
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1420
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1424
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1432
		{
			yyVAL.str = yyDollar[1].str
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1436
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1440
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1446
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1450
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1454
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 244:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1460
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 245:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1464
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 246:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1468
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 247:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1472
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 248:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1477
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1482
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 250:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1486
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1490
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1494
		{
			yyVAL.statement = &DBDDL{Action: AlterStr, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 253:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1498
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 254:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1510
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 255:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1520
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 256:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1524
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 257:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1528
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 258:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1541
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 259:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1551
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 260:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1555
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 275:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1584
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1590
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1594
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 278:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1600
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 279:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1604
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1610
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1616
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 282:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1620
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1628
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 284:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1636
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 285:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1641
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1649
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1653
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].colIdent.String())}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1659
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1663
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1668
		{
			yyVAL.statement = &OtherRead{}
		}
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1674
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1679
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Type: CharsetStr, ShowTablesOpt: showTablesOpt}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1684
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1689
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1694
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String())}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1698
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1702
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1706
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1710
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1714
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1718
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1722
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1727
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1731
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1735
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1739
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 307:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1743
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 308:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1748
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 309:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1758
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1762
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 311:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1766
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: yyDollar[4].expr}
		}
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1770
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1775
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1779
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 315:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1783
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1787
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 317:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1791
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[6].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].colIdent.String()), OnTable: yyDollar[5].tableName, ShowTablesOpt: showTablesOpt}
		}
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1808
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].colIdent.String()), ShowTablesOpt: showTablesOpt}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1813
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Scope: yyDollar[3].str}
		}
	case 320:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1818
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[6].showFilter}
			yyVAL.statement = &Show{Comments: Comments(yyDollar[3].bytes2), Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName, ShowTablesOpt: showTablesOpt, Columns: yyDollar[5].columns}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1825
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1829
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1835
		{
			yyVAL.str = ""
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1839
		{
			yyVAL.str = "extended "
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1845
		{
			yyVAL.str = ""
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1849
		{
			yyVAL.str = "full "
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1855
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1859
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1865
		{
			yyVAL.str = ""
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1869
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1873
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1879
		{
			yyVAL.showFilter = nil
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1883
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1887
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1893
		{
			yyVAL.showFilter = nil
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1897
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1903
		{
			yyVAL.str = ""
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1907
		{
			yyVAL.str = SessionStr
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1911
		{
			yyVAL.str = GlobalStr
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1917
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1921
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1927
		{
			yyVAL.statement = &Begin{}
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1931
		{
			yyVAL.statement = &Begin{}
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1937
		{
			yyVAL.statement = &Commit{}
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1943
		{
			yyVAL.statement = &Rollback{}
		}
	case 346:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1947
		{
			yyVAL.statement = &SRollback{Name: yyDollar[5].colIdent}
		}
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1952
		{
			yyVAL.empty = struct{}{}
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1954
		{
			yyVAL.empty = struct{}{}
		}
	case 349:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1957
		{
			yyVAL.empty = struct{}{}
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1959
		{
			yyVAL.empty = struct{}{}
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1964
		{
			yyVAL.statement = &Savepoint{Name: yyDollar[2].colIdent}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1970
		{
			yyVAL.statement = &Release{Name: yyDollar[3].colIdent}
		}
	case 353:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1975
		{
			yyVAL.str = ""
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1979
		{
			yyVAL.str = JSONStr
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1983
		{
			yyVAL.str = TreeStr
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1987
		{
			yyVAL.str = VitessStr
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1991
		{
			yyVAL.str = TraditionalStr
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1995
		{
			yyVAL.str = AnalyzeStr
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2001
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2005
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2009
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2015
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2019
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2023
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2027
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2032
		{
			yyVAL.str = ""
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2036
		{
			yyVAL.str = ""
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2040
		{
			yyVAL.str = ""
		}
	case 369:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2046
		{
			yyVAL.statement = &DescribeTable{Full: string(yyDollar[2].str), Extended: string(yyDollar[3].str), Table: yyDollar[4].tableName}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2050
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].str, Statement: yyDollar[3].statement}
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2056
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2060
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2064
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2068
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2074
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2078
		{
			setAllowComments(yylex, true)
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2082
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 378:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2088
		{
			yyVAL.bytes2 = nil
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2092
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2098
		{
			yyVAL.str = UnionStr
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2102
		{
			yyVAL.str = UnionAllStr
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2106
		{
			yyVAL.str = UnionDistinctStr
		}
	case 383:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2111
		{
			yyVAL.str = ""
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2115
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2119
		{
			yyVAL.str = SQLCacheStr
		}
	case 386:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2124
		{
			yyVAL.str = ""
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2128
		{
			yyVAL.str = DistinctStr
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2132
		{
			yyVAL.str = DistinctStr
		}
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2137
		{
			yyVAL.selectExprs = nil
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2141
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2146
		{
			yyVAL.strs = nil
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2150
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2154
		{ // TODO: This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2158
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str}
		}
	case 395:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2162
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str, yyDollar[4].str}
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2168
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2172
		{
			yyVAL.str = SQLCacheStr
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2176
		{
			yyVAL.str = DistinctStr
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2180
		{
			yyVAL.str = DistinctStr
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2184
		{
			yyVAL.str = StraightJoinHint
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2188
		{
			yyVAL.str = SQLCalcFoundRowsStr
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2194
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2198
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2204
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2208
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2212
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 407:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2216
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 408:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2221
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2225
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2229
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2236
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 413:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2241
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2245
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2251
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2255
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2265
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2269
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2273
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2279
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2285
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 424:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2289
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2294
		{
			yyVAL.columns = nil
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2298
		{
			yyVAL.columns = yyDollar[2].columns
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2305
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2309
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2315
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2319
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 431:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2332
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 432:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2336
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 433:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2340
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2344
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2350
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 436:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2352
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 437:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2356
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2358
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 439:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2362
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2364
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 441:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2367
		{
			yyVAL.empty = struct{}{}
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2369
		{
			yyVAL.empty = struct{}{}
		}
	case 443:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2372
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2376
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2380
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2387
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2393
		{
			yyVAL.str = JoinStr
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2397
		{
			yyVAL.str = JoinStr
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2401
		{
			yyVAL.str = JoinStr
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2407
		{
			yyVAL.str = StraightJoinStr
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2413
		{
			yyVAL.str = LeftJoinStr
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2417
		{
			yyVAL.str = LeftJoinStr
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2421
		{
			yyVAL.str = RightJoinStr
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2425
		{
			yyVAL.str = RightJoinStr
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2431
		{
			yyVAL.str = NaturalJoinStr
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2435
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2445
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2449
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2455
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2459
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 462:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2463
		{
			yyVAL.tableName = TableName{QualifierSecond: yyDollar[1].tableIdent, Qualifier: yyDollar[3].tableIdent, Name: yyDollar[5].tableIdent}
		}
	case 463:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2467
		{
			yyVAL.tableName = TableName{QualifierThird: yyDollar[1].tableIdent, QualifierSecond: yyDollar[3].tableIdent, Qualifier: yyDollar[5].tableIdent, Name: yyDollar[7].tableIdent}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2473
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 465:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2478
		{
			yyVAL.indexHints = nil
		}
	case 466:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2482
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 467:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2486
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr}
		}
	case 468:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2490
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 469:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2494
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 470:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2499
		{
			yyVAL.expr = nil
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2503
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2509
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2513
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2517
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2521
		{
			yyVAL.expr = &XorExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2525
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2529
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2533
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2537
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 480:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2543
		{
			yyVAL.str = ""
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2547
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2553
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2557
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2563
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2567
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 486:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2571
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 487:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2575
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 488:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2579
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2583
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 490:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2587
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 491:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2591
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 492:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2595
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2599
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2605
		{
			yyVAL.str = IsNullStr
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2609
		{
			yyVAL.str = IsNotNullStr
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2613
		{
			yyVAL.str = IsTrueStr
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2617
		{
			yyVAL.str = IsNotTrueStr
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2621
		{
			yyVAL.str = IsFalseStr
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2625
		{
			yyVAL.str = IsNotFalseStr
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2631
		{
			yyVAL.str = EqualStr
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2635
		{
			yyVAL.str = LessThanStr
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2639
		{
			yyVAL.str = GreaterThanStr
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2643
		{
			yyVAL.str = LessEqualStr
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2647
		{
			yyVAL.str = GreaterEqualStr
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2651
		{
			yyVAL.str = NotEqualStr
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2655
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 507:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2660
		{
			yyVAL.expr = nil
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2664
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2670
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2674
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2678
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2684
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2690
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2694
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2700
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2704
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2708
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2712
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2716
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2720
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2724
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2728
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2732
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2736
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2740
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2744
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2748
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2752
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2756
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2760
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2764
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2768
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2772
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2776
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2780
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2784
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2788
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8Str, Expr: yyDollar[2].expr}
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2792
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2796
		{
			yyVAL.expr = &UnaryExpr{Operator: Latin1Str, Expr: yyDollar[2].expr}
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2800
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2808
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2822
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2826
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2830
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 549:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2848
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 550:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2852
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 551:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2856
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 552:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2860
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 553:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2870
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 554:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2874
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 555:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2878
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 556:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2882
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 557:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2886
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 558:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2890
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 559:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2894
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 560:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2898
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 561:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2902
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 562:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2906
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 563:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2910
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 564:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2914
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 565:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2918
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2928
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2932
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2936
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2941
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2946
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2951
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2957
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2962
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2967
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2971
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2975
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2980
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2985
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2990
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 580:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2994
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 581:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2998
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3008
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3018
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 586:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3022
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 587:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3026
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3030
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 589:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3034
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 590:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3038
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 591:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3042
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3048
		{
			yyVAL.str = ""
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3052
		{
			yyVAL.str = BooleanModeStr
		}
	case 594:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3056
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 595:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3060
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3064
		{
			yyVAL.str = QueryExpansionStr
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3070
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3074
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3080
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3084
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3088
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3092
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3096
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3100
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3106
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3110
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3114
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3118
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3122
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3126
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3130
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 612:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3135
		{
			yyVAL.expr = nil
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3139
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 614:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3144
		{
			yyVAL.str = string("")
		}
	case 615:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3148
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3154
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3158
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 618:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3164
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 619:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3169
		{
			yyVAL.expr = nil
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3173
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3179
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3183
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 623:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3187
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3193
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3197
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3201
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3205
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3209
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3213
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3217
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3221
		{
			yyVAL.expr = &NullVal{}
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3227
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3236
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3240
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 635:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3245
		{
			yyVAL.exprs = nil
		}
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3249
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 637:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3254
		{
			yyVAL.expr = nil
		}
	case 638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3258
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 639:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3263
		{
			yyVAL.orderBy = nil
		}
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3267
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3273
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3277
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3283
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 644:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3288
		{
			yyVAL.str = AscScr
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3292
		{
			yyVAL.str = AscScr
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3296
		{
			yyVAL.str = DescScr
		}
	case 647:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3301
		{
			yyVAL.limit = nil
		}
	case 648:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3305
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 649:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3309
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 650:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3313
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 651:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3318
		{
			yyVAL.str = ""
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3322
		{
			yyVAL.str = ForUpdateStr
		}
	case 653:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3326
		{
			yyVAL.str = ShareModeStr
		}
	case 654:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3339
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3343
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 656:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3347
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 657:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3351
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3357
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3361
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3365
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 661:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3369
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 662:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3374
		{
			yyVAL.updateExprs = nil
		}
	case 663:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3378
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3384
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 665:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3388
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3394
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3398
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 668:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3404
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3410
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = yyDollar[1].valTuple[0]
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3420
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 671:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3424
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 672:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3430
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3436
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 674:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3440
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].str
			yyVAL.setExprs = SetExprs{yyDollar[2].setExpr}
		}
	case 675:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3445
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3451
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3455
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 678:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3459
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 679:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3463
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3470
		{
			yyVAL.bytes = []byte("charset")
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3477
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3481
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3485
		{
			yyVAL.expr = &Default{}
		}
	case 688:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3494
		{
			yyVAL.byt = 0
		}
	case 689:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3496
		{
			yyVAL.byt = 1
		}
	case 690:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3499
		{
			yyVAL.empty = struct{}{}
		}
	case 691:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3501
		{
			yyVAL.empty = struct{}{}
		}
	case 692:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3504
		{
			yyVAL.str = ""
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3506
		{
			yyVAL.str = IgnoreStr
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3510
		{
			yyVAL.empty = struct{}{}
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3512
		{
			yyVAL.empty = struct{}{}
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3514
		{
			yyVAL.empty = struct{}{}
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3516
		{
			yyVAL.empty = struct{}{}
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3518
		{
			yyVAL.empty = struct{}{}
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3520
		{
			yyVAL.empty = struct{}{}
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3522
		{
			yyVAL.empty = struct{}{}
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3524
		{
			yyVAL.empty = struct{}{}
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3526
		{
			yyVAL.empty = struct{}{}
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3528
		{
			yyVAL.empty = struct{}{}
		}
	case 704:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3531
		{
			yyVAL.empty = struct{}{}
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3533
		{
			yyVAL.empty = struct{}{}
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3535
		{
			yyVAL.empty = struct{}{}
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3539
		{
			yyVAL.empty = struct{}{}
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3541
		{
			yyVAL.empty = struct{}{}
		}
	case 709:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3544
		{
			yyVAL.empty = struct{}{}
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3546
		{
			yyVAL.empty = struct{}{}
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3548
		{
			yyVAL.empty = struct{}{}
		}
	case 712:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3551
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 713:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3553
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3557
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3561
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3568
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3574
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3578
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3585
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 722:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3591
		{
			yyVAL.execVarDef = NewExecVarDef(yyDollar[1].colIdent, yyDollar[3].expr)
		}
	case 723:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3597
		{
			yyVAL.execVarDef = NewExecVarDef(yyDollar[1].colIdent, yyDollar[3].expr)
		}
	case 724:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3603
		{
			yyVAL.execVarDefOpt = nil
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3605
		{
			rv := yyDollar[1].execVarDef
			yyVAL.execVarDefOpt = &rv
		}
	case 726:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3611
		{
			yyVAL.execVarDefs = nil
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3613
		{
			yyVAL.execVarDefs = []ExecVarDef{yyDollar[1].execVarDef}
		}
	case 728:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3617
		{
			yyVAL.execVarDefs = append(yyDollar[1].execVarDefs, yyDollar[3].execVarDef)
		}
	case 729:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3624
		{
			yyVAL.statement = NewExec(yyDollar[2].bytes2, yyDollar[3].tableName, yyDollar[4].execVarDefs, yyDollar[5].execVarDefOpt)
		}
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3951
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3960
		{
			decNesting(yylex)
		}
	case 1032:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3965
		{
			skipToEnd(yylex)
		}
	case 1033:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3970
		{
			skipToEnd(yylex)
		}
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3974
		{
			skipToEnd(yylex)
		}
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3978
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
